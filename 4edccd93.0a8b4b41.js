(window.webpackJsonp=window.webpackJsonp||[]).push([[29],{159:function(e,a,t){"use strict";t.d(a,"a",(function(){return c})),t.d(a,"b",(function(){return d}));var n=t(0),s=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function o(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=s.a.createContext({}),l=function(e){var a=s.a.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):m(m({},a),e)),t},c=function(e){var a=l(e.components);return s.a.createElement(p.Provider,{value:a},e.children)},b={inlineCode:"code",wrapper:function(e){var a=e.children;return s.a.createElement(s.a.Fragment,{},a)}},h=s.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,p=o(e,["components","mdxType","originalType","parentName"]),c=l(t),h=n,d=c["".concat(r,".").concat(h)]||c[h]||b[h]||i;return t?s.a.createElement(d,m(m({ref:a},p),{},{components:t})):s.a.createElement(d,m({ref:a},p))}));function d(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,r=new Array(i);r[0]=h;var m={};for(var o in a)hasOwnProperty.call(a,o)&&(m[o]=a[o]);m.originalType=e,m.mdxType="string"==typeof e?e:n,r[1]=m;for(var p=2;p<i;p++)r[p]=t[p];return s.a.createElement.apply(null,r)}return s.a.createElement.apply(null,t)}h.displayName="MDXCreateElement"},94:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return m})),t.d(a,"metadata",(function(){return o})),t.d(a,"rightToc",(function(){return p})),t.d(a,"default",(function(){return c}));var n=t(3),s=t(7),i=(t(0),t(159)),r=["components"],m={id:"tutorial13",title:"Active Shape Model Fitting"},o={unversionedId:"tutorials/tutorial13",id:"tutorials/tutorial13",isDocsHomePage:!1,title:"Active Shape Model Fitting",description:"In this tutorial we show how we can perform active shape model fitting in Scalismo.",source:"@site/docs/tutorials/tutorial13.md",slug:"/tutorials/tutorial13",permalink:"/docs/next/tutorials/tutorial13",editUrl:"https://github.com/unibas-gravis/scalismo-microsite/edit/master/website/docs/tutorials/tutorial13.md",version:"current",sidebar:"docs",previous:{title:"Parametric, non-rigid registration",permalink:"/docs/next/tutorials/tutorial12"},next:{title:"Model fitting using MCMC - The basic framework",permalink:"/docs/next/tutorials/tutorial14"}},p=[{value:"Active Shape models in Scalismo",id:"active-shape-models-in-scalismo",children:[{value:"The original Active Shape Model Fitting",id:"the-original-active-shape-model-fitting",children:[]}]},{value:"Evaluating the likelihood of a model instance under the image",id:"evaluating-the-likelihood-of-a-model-instance-under-the-image",children:[]}],l={rightToc:p};function c(e){var a=e.components,t=Object(s.a)(e,r);return Object(i.b)("wrapper",Object(n.a)({},l,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("p",null,"In this tutorial we show how we can perform active shape model fitting in Scalismo."),Object(i.b)("h5",{id:"related-resources"},"Related resources"),Object(i.b)("p",null,"The following resources from our ",Object(i.b)("a",{parentName:"p",href:"https://www.futurelearn.com/courses/statistical-shape-modelling"},"online course")," may provide\nsome helpful context for this tutorial:"),Object(i.b)("ul",null,Object(i.b)("li",{parentName:"ul"},"Fitting models to images ",Object(i.b)("a",{parentName:"li",href:"https://www.futurelearn.com/courses/statistical-shape-modelling/3/steps/250379"},"(Video)"))),Object(i.b)("h5",{id:"preparation"},"Preparation"),Object(i.b)("p",null,"As in the previous tutorials, we start by importing some commonly used objects and initializing the system."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"import scalismo.geometry._\nimport scalismo.transformations._\nimport scalismo.registration._\nimport scalismo.mesh.TriangleMesh\nimport scalismo.statisticalmodel.asm._\nimport scalismo.io.{ActiveShapeModelIO, ImageIO}\n\nimport scalismo.ui.api._\nimport breeze.linalg.{DenseVector}\n\nscalismo.initialize()\nimplicit val rng = scalismo.utils.Random(42)\n\nval ui = ScalismoUI()\n")),Object(i.b)("h2",{id:"active-shape-models-in-scalismo"},"Active Shape models in Scalismo"),Object(i.b)("p",null,"Scalismo provides full support for Active Shape models. This means we can use it to learn active shape models from\na set of images and corresponding contour, we can save these models, and we can use them to fit images. In this tutorial\nwe will assume that the model has already been built and will only concentrate on model fitting."),Object(i.b)("p",null,"We can load an Active Shape Model as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},'val asm = ActiveShapeModelIO.readActiveShapeModel(new java.io.File("datasets/femur-asm.h5")).get\n')),Object(i.b)("p",null,"An ActiveShapeModel instance in Scalismo is a combination of a statistical shape model and an intensity model.\nUsing the method ",Object(i.b)("inlineCode",{parentName:"p"},"statisticalModel"),", we can obtain the shape model part. Let's visualize this model:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},'val modelGroup = ui.createGroup("modelGroup")\nval modelView = ui.show(modelGroup, asm.statisticalModel, "shapeModel")\n')),Object(i.b)("p",null,"The second part of the model is the intensity model. This model consists of a set of profiles,\nwhich are attached to specific vertices of the shape model, indicated by the ",Object(i.b)("inlineCode",{parentName:"p"},"pointId"),".\nFor each profile, a probability distribution is defined. This distribution represent the intensity variation that we\nexpect for this profile."),Object(i.b)("p",null,"The following code shows how this information can be accessed:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val profiles = asm.profiles\nprofiles.map(profile => {\n  val pointId = profile.pointId\n  val distribution = profile.distribution\n})\n")),Object(i.b)("h4",{id:"finding-likely-model-correspondences-in-an-image"},"Finding likely model correspondences in an image"),Object(i.b)("p",null,"The main usage of the profile distribution is to identify the points in the image, which are most likely to correspond to the given profile points in the model.\nMore precisely, let ",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("msub",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msub"},"p"),Object(i.b)("mi",{parentName:"msub"},"i"))),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p_i")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(i.b)("span",{parentName:"span",className:"msupsub"},Object(i.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.31166399999999994em"}},Object(i.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(i.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(i.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"i")))),Object(i.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(i.b)("span",{parentName:"span"}))))))))))," denote the i-th profile in the model. We can use the information to evaluate for any set of points\n",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(i.b)("msub",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msub"},"x"),Object(i.b)("mn",{parentName:"msub"},"1")),Object(i.b)("mo",{parentName:"mrow",separator:"true"},","),Object(i.b)("mo",{parentName:"mrow"},"\u2026"),Object(i.b)("mo",{parentName:"mrow",separator:"true"},","),Object(i.b)("msub",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msub"},"x"),Object(i.b)("mi",{parentName:"msub"},"n")),Object(i.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"(x_1, \\ldots, x_n)")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(i.b)("span",{parentName:"span",className:"mopen"},"("),Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"x"),Object(i.b)("span",{parentName:"span",className:"msupsub"},Object(i.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},Object(i.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(i.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(i.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(i.b)("span",{parentName:"span",className:"mord mtight"},"1")))),Object(i.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(i.b)("span",{parentName:"span"})))))),Object(i.b)("span",{parentName:"span",className:"mpunct"},","),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(i.b)("span",{parentName:"span",className:"minner"},"\u2026"),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(i.b)("span",{parentName:"span",className:"mpunct"},","),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"x"),Object(i.b)("span",{parentName:"span",className:"msupsub"},Object(i.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},Object(i.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(i.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(i.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"n")))),Object(i.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(i.b)("span",{parentName:"span"})))))),Object(i.b)("span",{parentName:"span",className:"mclose"},")"))))),", how likely it is that a point ",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("msub",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msub"},"x"),Object(i.b)("mi",{parentName:"msub"},"j"))),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x_j")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.716668em",verticalAlign:"-0.286108em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"x"),Object(i.b)("span",{parentName:"span",className:"msupsub"},Object(i.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.311664em"}},Object(i.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(i.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(i.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault mtight",style:{marginRight:"0.05724em"}},"j")))),Object(i.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.286108em"}},Object(i.b)("span",{parentName:"span"}))))))))))," corresponds to the profile point ",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("msub",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msub"},"p"),Object(i.b)("mi",{parentName:"msub"},"i"))),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p_i")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(i.b)("span",{parentName:"span",className:"msupsub"},Object(i.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.31166399999999994em"}},Object(i.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(i.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(i.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"i")))),Object(i.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(i.b)("span",{parentName:"span"})))))))))),", based on the image intensity patterns\n",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"\u03c1"),Object(i.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(i.b)("msub",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msub"},"x"),Object(i.b)("mn",{parentName:"msub"},"1")),Object(i.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(i.b)("mo",{parentName:"mrow",separator:"true"},","),Object(i.b)("mo",{parentName:"mrow"},"\u2026"),Object(i.b)("mo",{parentName:"mrow",separator:"true"},","),Object(i.b)("mi",{parentName:"mrow"},"\u03c1"),Object(i.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(i.b)("msub",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msub"},"x"),Object(i.b)("mi",{parentName:"msub"},"n")),Object(i.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\rho(x_1), \\ldots, \\rho(x_n)")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"\u03c1"),Object(i.b)("span",{parentName:"span",className:"mopen"},"("),Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"x"),Object(i.b)("span",{parentName:"span",className:"msupsub"},Object(i.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},Object(i.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(i.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(i.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(i.b)("span",{parentName:"span",className:"mord mtight"},"1")))),Object(i.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(i.b)("span",{parentName:"span"})))))),Object(i.b)("span",{parentName:"span",className:"mclose"},")"),Object(i.b)("span",{parentName:"span",className:"mpunct"},","),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(i.b)("span",{parentName:"span",className:"minner"},"\u2026"),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(i.b)("span",{parentName:"span",className:"mpunct"},","),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"\u03c1"),Object(i.b)("span",{parentName:"span",className:"mopen"},"("),Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"x"),Object(i.b)("span",{parentName:"span",className:"msupsub"},Object(i.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},Object(i.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(i.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(i.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"n")))),Object(i.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(i.b)("span",{parentName:"span"})))))),Object(i.b)("span",{parentName:"span",className:"mclose"},")")))))," we find at these points in an image."),Object(i.b)("p",null,"To illustrate this, we first load an image:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},'val image = ImageIO.read3DScalarImage[Short](new java.io.File("datasets/femur-image.nii")).get.map(_.toFloat)\nval targetGroup = ui.createGroup("target")\n\nval imageView = ui.show(targetGroup, image, "image")\n')),Object(i.b)("p",null,"The ASM implementation in Scalismo, is not restricted to work with the raw intensities, but the active shape model may first apply some preprocessing,\nsuch as smooth, applying a gradient transform, etc.  Thus in a first step we obtain this preprocess iamge uing the prepocessor method of the ",Object(i.b)("inlineCode",{parentName:"p"},"asm")," object:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val preprocessedImage = asm.preprocessor(image)\n")),Object(i.b)("p",null,"We can now extract features at a given point:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val point1 = image.domain.origin + EuclideanVector3D(10.0, 10.0, 10.0)\nval profile = asm.profiles.head\nval feature1 : DenseVector[Double] = asm.featureExtractor(preprocessedImage, point1, asm.statisticalModel.mean, profile.pointId).get\n")),Object(i.b)("p",null,"Here we specified the preprocessed image, a point in the image where whe want the evaluate the feature vector, a mesh instance and a point id for the mesh.\nThe mesh instance and point id are needed, since a feature extractor might choose to extract the feature based on mesh information, such as the normal direction\nof a line at this point."),Object(i.b)("p",null,"We can retrieve the likelihood that each corresponding point corresponds to a given profile point:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val point2 = image.domain.origin + EuclideanVector3D(20.0, 10.0, 10.0)\nval featureVec1 = asm.featureExtractor(preprocessedImage, point1, asm.statisticalModel.mean, profile.pointId).get\nval featureVec2 = asm.featureExtractor(preprocessedImage, point2, asm.statisticalModel.mean, profile.pointId).get\n\nval probabilityPoint1 = profile.distribution.logpdf(featureVec1)\nval probabilityPoint2 = profile.distribution.logpdf(featureVec2)\n")),Object(i.b)("p",null,"Based on this information, we can decide, which point is more likely to correspond to the model point. This idea forms the\nbasis of the original m Active Shape Model Fitting algorithm."),Object(i.b)("h3",{id:"the-original-active-shape-model-fitting"},"The original Active Shape Model Fitting"),Object(i.b)("p",null,"Scalismo features an implementation of Active Shape Model fitting algorithm, as proposed by ",Object(i.b)("a",{parentName:"p",href:"http://citeseerx.ist.psu.edu/viewdoc/download?doi=10.1.1.141.3089&rep=rep1&type=pdf"},"Cootes and Taylor"),"."),Object(i.b)("p",null,'To configure the fitting process, we need to set up a search method, which searches for a given model point, corresponding  points\nin the image. From these points, the most likely point is select and used as as the corresponding point for one iteration of\nthe algorithm. Once these "candidate correspondences" have been established, the rest of the algorithm works in exactly the same as\nthe ICP algorithm that we described in the previous tutorials.'),Object(i.b)("p",null,"One search strategy that is already implemented in Scalismo is to search along\nthe normal direction of a model point. This behavior is provided by the ",Object(i.b)("inlineCode",{parentName:"p"},"NormalDirectionSearchPointSampler")),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val searchSampler = NormalDirectionSearchPointSampler(numberOfPoints = 100, searchDistance = 3)\n")),Object(i.b)("p",null,"In addition to the search strategy, we can specify some additional configuration parameters to control the fitting process:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val config = FittingConfiguration(featureDistanceThreshold = 3, pointDistanceThreshold = 5, modelCoefficientBounds = 3)\n")),Object(i.b)("p",null,"The first parameter determines how far away (as measured by the mahalanobis distance) an intensity feature can be, such that it is still\nchosen as corresponding. The ",Object(i.b)("inlineCode",{parentName:"p"},"pointDistanceThreshold")," does the same for the distance of the points; I.e. in this  case points which are\nmore than 5 standard deviations aways are not chosen as corresponding points. The last parameters determines how\nlarge coefficients of the model can become in the fitting process. Whenever a model parameter is larger than this threshold,\nit will be set back to this maximal value. This introduces a regularization into the fitting, which prevents the shape\nfrom becoming too unlikely."),Object(i.b)("p",null,"The ASM fitting algorithm optimizes both the pose (as defined by a rigid transformation) and the shape.\nIn order to allow it to optimize the rotation, it is important that we choose a rotation center, which is approximately\nthe center of mass of the model:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"    // make sure we rotate around a reasonable center point\nval modelBoundingBox = asm.statisticalModel.referenceMesh.boundingBox\nval rotationCenter = modelBoundingBox.origin + modelBoundingBox.extent * 0.5\n")),Object(i.b)("p",null,"To initialize the fitting process, we also need to set up the initial transformation:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"\n// we start with the identity transform\nval translationTransformation = Translation3D(EuclideanVector3D(0, 0, 0))\nval rotationTransformation = Rotation3D(0, 0, 0, rotationCenter)\nval initialRigidTransformation = TranslationAfterRotation3D(translationTransformation, rotationTransformation)\nval initialModelCoefficients = DenseVector.zeros[Double](asm.statisticalModel.rank)\nval initialTransformation = ModelTransformations(initialModelCoefficients, initialRigidTransformation)\n")),Object(i.b)("p",null,"To start the fitting, we obtain an iterator, which we subsequently use to drive the iteration."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val numberOfIterations = 20\nval asmIterator = asm.fitIterator(image, searchSampler, numberOfIterations, config, initialTransformation)\n")),Object(i.b)("p",null,"Especially in a debugging phase, we want to visualize the result in every iteration. The following code shows,\nhow we can obtain a new iterator, which updates the pose transformation and model coefficients in the ",Object(i.b)("inlineCode",{parentName:"p"},"ui"),"\nin every iteration:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val asmIteratorWithVisualization = asmIterator.map(it => {\n    it match {\n        case scala.util.Success(iterationResult) => {\n            modelView.shapeModelTransformationView.poseTransformationView.transformation = iterationResult.transformations.rigidTransform\n            modelView.shapeModelTransformationView.shapeTransformationView.coefficients = iterationResult.transformations.coefficients\n        }\n        case scala.util.Failure(error) => System.out.println(error.getMessage)\n    }\n    it\n})\n")),Object(i.b)("p",null,"To run the fitting, and get the result, we finally consume the iterator:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val result = asmIteratorWithVisualization.toIndexedSeq.last\nval finalMesh = result.get.mesh\n\n")),Object(i.b)("h2",{id:"evaluating-the-likelihood-of-a-model-instance-under-the-image"},"Evaluating the likelihood of a model instance under the image"),Object(i.b)("p",null,"In the previous section we have used the intensity distribution to find the best corresponding image point to a\ngiven point in the model. Sometimes we are also interested in finding out how well a model fits an image.\nTo compute this, we can extend the method used above to compute the likelihood for all profile points of an Active Shape Model."),Object(i.b)("p",null,"Given the model instance, we will get the position of each profile point in the current instance,\nevaluate its likelihood and then compute the joint likelihood for all profiles. Assuming independence, the joint probability is just the product of the probability at the individual profile points.\nIn order not to get too extreme values, we use log probabilities here (and consequently the product becomes a sum)."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"def likelihoodForMesh(asm : ActiveShapeModel, mesh : TriangleMesh[_3D], preprocessedImage: PreprocessedImage) : Double = {\n\n    val ids = asm.profiles.ids\n\n    val likelihoods = for (id <- ids) yield {\n      val profile = asm.profiles(id)\n      val profilePointOnMesh = mesh.pointSet.point(profile.pointId)\n      val featureAtPoint = asm.featureExtractor(preprocessedImage, profilePointOnMesh, mesh, profile.pointId).get\n      profile.distribution.logpdf(featureAtPoint)\n    }\n    likelihoods.sum\n}\n")),Object(i.b)("p",null,"This method allows us to compute for each mesh, represented by the model, how likely it is to correspond\nto the given image."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},'val sampleMesh1 = asm.statisticalModel.sample\nval sampleMesh2 = asm.statisticalModel.sample\nprintln("Likelihood for mesh 1 = " + likelihoodForMesh(asm, sampleMesh1, preprocessedImage))\nprintln("Likelihood for mesh 2 = " + likelihoodForMesh(asm, sampleMesh2, preprocessedImage))\n')),Object(i.b)("p",null,"This information is all that is need to write probabilistic fitting methods methods using Markov Chain Monte Carlo\nmethods, which will be discussed in a later tutorial."))}c.isMDXComponent=!0}}]);