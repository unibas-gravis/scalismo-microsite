(window.webpackJsonp=window.webpackJsonp||[]).push([[63],{128:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return o})),t.d(a,"metadata",(function(){return m})),t.d(a,"rightToc",(function(){return i})),t.d(a,"default",(function(){return l}));var n=t(3),s=t(7),r=(t(0),t(154)),o={id:"tutorial15",title:"Model fitting using MCMC - Fitting a shape model"},m={unversionedId:"tutorials/tutorial15",id:"tutorials/tutorial15",isDocsHomePage:!1,title:"Model fitting using MCMC - Fitting a shape model",description:"In this tutorial we show how the MCMC framework, which was introduced in the previous",source:"@site/docs/tutorials/tutorial15.md",slug:"/tutorials/tutorial15",permalink:"/docs/next/tutorials/tutorial15",editUrl:"https://github.com/unibas-gravis/scalismo-microsite/edit/master/website/docs/tutorials/tutorial15.md",version:"current",sidebar:"docs",previous:{title:"Model fitting using MCMC - The basic framework",permalink:"/docs/next/tutorials/tutorial14"},next:{title:"Introduction to Scalismo-ui",permalink:"/docs/next/tutorials/scalismo-ui-introduction"}},i=[{value:"Loading and visualizing the data",id:"loading-and-visualizing-the-data",children:[]},{value:"The parameter class",id:"the-parameter-class",children:[]},{value:"Evaluators: Modelling the target density",id:"evaluators-modelling-the-target-density",children:[]},{value:"The proposal generator",id:"the-proposal-generator",children:[]},{value:"Analyzing the results",id:"analyzing-the-results",children:[]},{value:"Beyond landmark fitting",id:"beyond-landmark-fitting",children:[]}],p={rightToc:i};function l(e){var a=e.components,t=Object(s.a)(e,["components"]);return Object(r.b)("wrapper",Object(n.a)({},p,t,{components:a,mdxType:"MDXLayout"}),Object(r.b)("p",null,"In this tutorial we show how the MCMC framework, which was introduced in the previous\ntutorial, can be used for shape model fitting."),Object(r.b)("p",null,"We will illustrate it by computing a posterior of a shape model,\ngiven a set of corresponding landmark pairs. This is the same setup that we have\ndiscussed in the tutorial about Gaussian process regression. The difference is,\nthat here we will also allow for rotation and translation of the model. In this setting,\nit is not possible anymore to compute the posterior analytically. Rather, our only hope are approximation methods, such as\nusing Markov-chain monte carlo methods."),Object(r.b)("p",null,"In this tutorial we show not only a working example, but also how to make it\ncomputationally efficient. Making the individual parts as efficient as possible is\nimportant in sampling approaches, as we need to produce many samples to get accurate\nestimates."),Object(r.b)("h5",{id:"related-resources"},"Related resources"),Object(r.b)("p",null,"Week 3 of our ",Object(r.b)("a",{parentName:"p",href:"https://shapemodelling.cs.unibas.ch/probabilistic-fitting-course/"},"online course")," on shape model fitting may provide some helpful context for this tutorial."),Object(r.b)("h5",{id:"preparation"},"Preparation"),Object(r.b)("p",null,"As in the previous tutorials, we start by importing some commonly used objects and\ninitializing the system."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"import scalismo.common.{PointId, UnstructuredPointsDomain}\nimport scalismo.geometry._\nimport scalismo.io.{LandmarkIO, MeshIO, StatisticalModelIO}\nimport scalismo.mesh.TriangleMesh\nimport scalismo.sampling.algorithms.MetropolisHastings\nimport scalismo.sampling.evaluators.ProductEvaluator\nimport scalismo.sampling.proposals.MixtureProposal\nimport scalismo.sampling.loggers.AcceptRejectLogger\nimport scalismo.sampling.{DistributionEvaluator, ProposalGenerator, TransitionProbability}\nimport scalismo.statisticalmodel.{MultivariateNormalDistribution, PointDistributionModel, PointDistributionModel3D}\nimport scalismo.transformations.{\n  RigidTransformation,\n  Rotation3D,\n  Translation3D,\n  TranslationAfterRotation,\n  TranslationAfterRotation3D\n}\n\nimport scalismo.utils.Memoize\n\nimport scalismo.ui.api.ScalismoUI\nimport breeze.linalg.{DenseMatrix, DenseVector}\n\nimplicit val rng = scalismo.utils.Random(42)\nscalismo.initialize()\n\nval ui = ScalismoUI()\n\n")),Object(r.b)("h3",{id:"loading-and-visualizing-the-data"},"Loading and visualizing the data"),Object(r.b)("p",null,"In a first step, we load and visualize all the data that we need.\nFirst, we load the statistical model:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'val model = StatisticalModelIO.readStatisticalTriangleMeshModel3D(new java.io.File("datasets/bfm.h5")).get\n\nval modelGroup = ui.createGroup("model")\nval modelView = ui.show(modelGroup, model, "model")\nmodelView.referenceView.opacity = 0.5\n')),Object(r.b)("p",null,"In this example, we will fit the model such that a set of model landmarks, coincide\nwith a set of landmark points defined on a target face. We load and visualize the corresponding landmark data:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'val modelLms = LandmarkIO.readLandmarksJson[_3D](new java.io.File("datasets/modelLM_mcmc.json")).get\nval modelLmViews = ui.show(modelGroup, modelLms, "modelLandmarks")\nmodelLmViews.foreach(lmView => lmView.color = java.awt.Color.BLUE)\n\nval targetGroup = ui.createGroup("target")\n\nval targetLms = LandmarkIO.readLandmarksJson3D(new java.io.File("datasets/targetLM_mcmc.json")).get\nval targetLmViews = ui.show(targetGroup, targetLms, "targetLandmarks")\nmodelLmViews.foreach(lmView => lmView.color = java.awt.Color.RED)\n')),Object(r.b)("p",null,"In the following, we will refer to the points on the model using their point id, while the target\nposition is represented as physical points. The reason why we use the point id for the model is that the model instances,\nand therefore the points, which are represented by the point id, are changing as we fit the model."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"val modelLmIds = modelLms.map(l => model.mean.pointSet.pointId(l.point).get)\nval targetPoints = targetLms.map(l => l.point)\n")),Object(r.b)("p",null,"We summarize the correspondences as a tuple, consisting of model id and target position."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"val correspondences = modelLmIds\n  .zip(targetPoints)\n  .map(modelIdWithTargetPoint => {\n    val (modelId, targetPoint) = modelIdWithTargetPoint\n    (modelId, targetPoint)\n  })\n")),Object(r.b)("h3",{id:"the-parameter-class"},"The parameter class"),Object(r.b)("p",null,"In this example, we want to model the posterior ",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"p"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("mi",{parentName:"mrow"},"\u03b8"),Object(r.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(r.b)("mi",{parentName:"mrow"},"D"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(\\theta | D)")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(r.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"D"),Object(r.b)("span",{parentName:"span",className:"mclose"},")"))))),", where\nthe parameters ",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"\u03b8"),Object(r.b)("mo",{parentName:"mrow"},"="),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("mi",{parentName:"mrow"},"t"),Object(r.b)("mo",{parentName:"mrow",separator:"true"},","),Object(r.b)("mi",{parentName:"mrow"},"r"),Object(r.b)("mo",{parentName:"mrow",separator:"true"},","),Object(r.b)("mi",{parentName:"mrow"},"\u03b1"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta =( t, r, \\alpha)")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(r.b)("span",{parentName:"span",className:"mrel"},"="),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"t"),Object(r.b)("span",{parentName:"span",className:"mpunct"},","),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"r"),Object(r.b)("span",{parentName:"span",className:"mpunct"},","),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.0037em"}},"\u03b1"),Object(r.b)("span",{parentName:"span",className:"mclose"},")")))))," consist of the translation parameters\n",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"t"),Object(r.b)("mo",{parentName:"mrow"},"="),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("msub",{parentName:"mrow"},Object(r.b)("mi",{parentName:"msub"},"t"),Object(r.b)("mi",{parentName:"msub"},"x")),Object(r.b)("mo",{parentName:"mrow",separator:"true"},","),Object(r.b)("msub",{parentName:"mrow"},Object(r.b)("mi",{parentName:"msub"},"t"),Object(r.b)("mi",{parentName:"msub"},"y")),Object(r.b)("mo",{parentName:"mrow",separator:"true"},","),Object(r.b)("msub",{parentName:"mrow"},Object(r.b)("mi",{parentName:"msub"},"t"),Object(r.b)("mi",{parentName:"msub"},"z")),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"t=(t_x, t_y, t_z)")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"0.61508em",verticalAlign:"0em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"t"),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(r.b)("span",{parentName:"span",className:"mrel"},"="),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1.036108em",verticalAlign:"-0.286108em"}}),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"t"),Object(r.b)("span",{parentName:"span",className:"msupsub"},Object(r.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},Object(r.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(r.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(r.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"x")))),Object(r.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(r.b)("span",{parentName:"span"})))))),Object(r.b)("span",{parentName:"span",className:"mpunct"},","),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"mord"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"t"),Object(r.b)("span",{parentName:"span",className:"msupsub"},Object(r.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15139200000000003em"}},Object(r.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(r.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(r.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault mtight",style:{marginRight:"0.03588em"}},"y")))),Object(r.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.286108em"}},Object(r.b)("span",{parentName:"span"})))))),Object(r.b)("span",{parentName:"span",className:"mpunct"},","),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"mord"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"t"),Object(r.b)("span",{parentName:"span",className:"msupsub"},Object(r.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},Object(r.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"0em",marginRight:"0.05em"}},Object(r.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(r.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault mtight",style:{marginRight:"0.04398em"}},"z")))),Object(r.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(r.b)("span",{parentName:"span"})))))),Object(r.b)("span",{parentName:"span",className:"mclose"},")"))))),", the rotation parameters ",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"r"),Object(r.b)("mo",{parentName:"mrow"},"="),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("mi",{parentName:"mrow"},"\u03d5"),Object(r.b)("mo",{parentName:"mrow",separator:"true"},","),Object(r.b)("mi",{parentName:"mrow"},"\u03c8"),Object(r.b)("mo",{parentName:"mrow",separator:"true"},","),Object(r.b)("mi",{parentName:"mrow"},"\u03c9"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"r = (\\phi, \\psi, \\omega)")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"r"),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(r.b)("span",{parentName:"span",className:"mrel"},"="),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"\u03d5"),Object(r.b)("span",{parentName:"span",className:"mpunct"},","),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"\u03c8"),Object(r.b)("span",{parentName:"span",className:"mpunct"},","),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"\u03c9"),Object(r.b)("span",{parentName:"span",className:"mclose"},")"))))),",\nrepresented as Euler angles as well a shape model coefficients ",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"\u03b1"),Object(r.b)("mo",{parentName:"mrow"},"="),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("msub",{parentName:"mrow"},Object(r.b)("mi",{parentName:"msub"},"\u03b1"),Object(r.b)("mn",{parentName:"msub"},"1")),Object(r.b)("mo",{parentName:"mrow",separator:"true"},","),Object(r.b)("mo",{parentName:"mrow"},"\u2026"),Object(r.b)("mo",{parentName:"mrow",separator:"true"},","),Object(r.b)("msub",{parentName:"mrow"},Object(r.b)("mi",{parentName:"msub"},"\u03b1"),Object(r.b)("mi",{parentName:"msub"},"n")),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\alpha = (\\alpha_1, \\ldots, \\alpha_n)")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"0.43056em",verticalAlign:"0em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.0037em"}},"\u03b1"),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(r.b)("span",{parentName:"span",className:"mrel"},"="),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.0037em"}},"\u03b1"),Object(r.b)("span",{parentName:"span",className:"msupsub"},Object(r.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},Object(r.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.0037em",marginRight:"0.05em"}},Object(r.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(r.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(r.b)("span",{parentName:"span",className:"mord mtight"},"1")))),Object(r.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(r.b)("span",{parentName:"span"})))))),Object(r.b)("span",{parentName:"span",className:"mpunct"},","),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"minner"},"\u2026"),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"mpunct"},","),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(r.b)("span",{parentName:"span",className:"mord"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.0037em"}},"\u03b1"),Object(r.b)("span",{parentName:"span",className:"msupsub"},Object(r.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},Object(r.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.0037em",marginRight:"0.05em"}},Object(r.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(r.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(r.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"n")))),Object(r.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(r.b)("span",{parentName:"span",className:"vlist-r"},Object(r.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(r.b)("span",{parentName:"span"})))))),Object(r.b)("span",{parentName:"span",className:"mclose"},")"))))),".\nFurthermore, we also model the noise as a parameter."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"case class Parameters(translationParameters: EuclideanVector[_3D],\n                      rotationParameters: (Double, Double, Double),\n                      modelCoefficients: DenseVector[Double],\n                      noiseStddev : Double\n                     )\n")),Object(r.b)("p",null,"As in the previous tutorial, we wrap this into a class representing the sample, which can keep track by whom it was generated. Furthermore, we will add convenience method,\nwhich builds a ",Object(r.b)("inlineCode",{parentName:"p"},"RigidTransformation")," from the parameters. As a rigid transformation\nis not completely determined by the translation and rotation parameters, we need to\nstore also the center of rotation."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"case class Sample(generatedBy: String, parameters: Parameters, rotationCenter: Point[_3D]) {\n  def poseTransformation: TranslationAfterRotation[_3D] = {\n    val translation = Translation3D(parameters.translationParameters)\n    val rotation = Rotation3D(\n      parameters.rotationParameters._1,\n      parameters.rotationParameters._2,\n      parameters.rotationParameters._3,\n      rotationCenter\n    )\n    TranslationAfterRotation3D(translation, rotation)\n  }\n}\n")),Object(r.b)("h3",{id:"evaluators-modelling-the-target-density"},"Evaluators: Modelling the target density"),Object(r.b)("p",null,"As in the previous tutorial, we represent the unnormalized posterior distribution\nas the product of prior and likelihood:\n",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"p"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("mi",{parentName:"mrow"},"\u03b8"),Object(r.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(r.b)("mi",{parentName:"mrow"},"D"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(r.b)("mo",{parentName:"mrow"},"\u221d"),Object(r.b)("mi",{parentName:"mrow"},"p"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("mi",{parentName:"mrow"},"\u03b8"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(r.b)("mi",{parentName:"mrow"},"p"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("mi",{parentName:"mrow"},"D"),Object(r.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(r.b)("mi",{parentName:"mrow"},"\u03b8"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(\\theta | D) \\propto p(\\theta) p(D | \\theta)")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(r.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"D"),Object(r.b)("span",{parentName:"span",className:"mclose"},")"),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(r.b)("span",{parentName:"span",className:"mrel"},"\u221d"),Object(r.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(r.b)("span",{parentName:"span",className:"mclose"},")"),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"D"),Object(r.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(r.b)("span",{parentName:"span",className:"mclose"},")"))))),",\nwhere ",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"D")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"D")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"0.68333em",verticalAlign:"0em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"D")))))," denotes the data (i.e. the corresponding landmark points) and ",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"\u03b8")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"))))),"\nare our parameters."),Object(r.b)("p",null,"As a prior over the shape parameters is given by the shape model. For the\ntranslation and rotation, we assume a zero-mean normal distribution. As the standard deviation\ncharacterizing the noise needs to be positive, we use a lognormal distribution.:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"case class PriorEvaluator(model: PointDistributionModel[_3D, TriangleMesh]) extends DistributionEvaluator[Sample] {\n\n  val translationPrior = breeze.stats.distributions.Gaussian(0.0, 5.0)\n  val rotationPrior = breeze.stats.distributions.Gaussian(0, 0.1)\n  val noisePrior = breeze.stats.distributions.LogNormal(0, 0.25)\n\n  override def logValue(sample: Sample): Double = {\n    model.gp.logpdf(sample.parameters.modelCoefficients) +\n      translationPrior.logPdf(sample.parameters.translationParameters.x) +\n      translationPrior.logPdf(sample.parameters.translationParameters.y) +\n      translationPrior.logPdf(sample.parameters.translationParameters.z) +\n      rotationPrior.logPdf(sample.parameters.rotationParameters._1) +\n      rotationPrior.logPdf(sample.parameters.rotationParameters._2) +\n      rotationPrior.logPdf(sample.parameters.rotationParameters._3) +\n      noisePrior.logPdf(sample.parameters.noiseStddev)\n  }\n}\n")),Object(r.b)("p",null,"To compute the likelihood ",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"p"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("mi",{parentName:"mrow"},"D"),Object(r.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(r.b)("mi",{parentName:"mrow"},"\u03b8"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(D | \\theta)")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"D"),Object(r.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(r.b)("span",{parentName:"span",className:"mclose"},")")))))," we first compute\nthe current model instance as determined by the shape and pose parameters.\nFrom this model instance, the points at the given points id are extracted and\nthe distance to their target position is computed. This distance is what was\nmodelled by the uncertainty of the observations. We can therefore directly use\nthe modelled uncertainty to compute the likelihood of our model given the data:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"case class SimpleCorrespondenceEvaluator(model: PointDistributionModel[_3D, TriangleMesh],\n                                         correspondences: Seq[(PointId, Point[_3D])])\n    extends DistributionEvaluator[Sample] {\n\n  override def logValue(sample: Sample): Double = {\n\n    val currModelInstance = model.instance(sample.parameters.modelCoefficients).transform(sample.poseTransformation)\n    \n    val lmUncertainty = MultivariateNormalDistribution(DenseVector.zeros[Double](3), DenseMatrix.eye[Double](3) * sample.parameters.noiseStddev)\n\n\n    val likelihoods = correspondences.map(correspondence => {\n      val (id, targetPoint) = correspondence\n      val modelInstancePoint = currModelInstance.pointSet.point(id)\n      val observedDeformation = targetPoint - modelInstancePoint\n\n      lmUncertainty.logpdf(observedDeformation.toBreezeVector)\n    })\n\n    val loglikelihood = likelihoods.sum\n    loglikelihood\n  }\n}\n")),Object(r.b)("p",null,"Conceptually, this is all that needed to be done to specify the target distribution.\nIn practice, we are interested to make these evaluators as efficient as possible,\nas they are usually called thousands of times."),Object(r.b)("h5",{id:"performance-improvements"},"Performance improvements"),Object(r.b)("p",null,"In the above implementation, we compute a full model instance (the new position of all the mesh points\nrepresented by the shape model), although we are only interested in the position of the landmark points.\nThis is rather inefficient. A more efficient version would first marginalize the model to the\npoints of interest. Since marginalization changes the point ids, we need to map the\nids given as",Object(r.b)("inlineCode",{parentName:"p"},"correspondences")," to their new ids. This is achieved by the following helper function:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"def marginalizeModelForCorrespondences(model: PointDistributionModel[_3D, TriangleMesh],\n                                        correspondences: Seq[(PointId, Point[_3D])])\n: (PointDistributionModel[_3D, UnstructuredPointsDomain],\n  Seq[(PointId, Point[_3D])]) = {\n\n  val (modelIds, _) = correspondences.unzip\n  val marginalizedModel = model.marginal(modelIds.toIndexedSeq)\n  val newCorrespondences = correspondences.map(idWithTargetPoint => {\n    val (id, targetPoint) = idWithTargetPoint\n    val modelPoint = model.reference.pointSet.point(id)\n    val newId = marginalizedModel.reference.pointSet.findClosestPoint(modelPoint).id\n    (newId, targetPoint)\n  })\n  (marginalizedModel, newCorrespondences)\n}\n")),Object(r.b)("p",null,"The more efficient version of the evaluator uses now the marginalized model to evaluate the likelihood:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"case class CorrespondenceEvaluator(model: PointDistributionModel[_3D, TriangleMesh],\n                                   correspondences: Seq[(PointId, Point[_3D])])\n  extends DistributionEvaluator[Sample] {\n\n  val (marginalizedModel, newCorrespondences) = marginalizeModelForCorrespondences(model, correspondences)\n\n  override def logValue(sample: Sample): Double = {\n\n    val lmUncertainty = MultivariateNormalDistribution(DenseVector.zeros[Double](3), DenseMatrix.eye[Double](3) * sample.parameters.noiseStddev)\n\n    val currModelInstance = marginalizedModel\n      .instance(sample.parameters.modelCoefficients)\n      .transform(sample.poseTransformation)\n\n    val likelihoods = newCorrespondences.map(correspondence => {\n      val (id, targetPoint) = correspondence\n      val modelInstancePoint = currModelInstance.pointSet.point(id)\n      val observedDeformation = targetPoint - modelInstancePoint\n\n      lmUncertainty.logpdf(observedDeformation.toBreezeVector)\n    })\n\n    val loglikelihood = likelihoods.sum\n    loglikelihood\n  }\n}\n")),Object(r.b)("p",null,"In order for the Metropolis-Hastings algorithm to decide if a new sample is accepted,\nthe likelihood needs to be computed several times for each set of parameters. To further\nincrease the efficiency, we should therefore cache the computations, such that when\nan evaluator is used the second time with the same parameters, the ",Object(r.b)("inlineCode",{parentName:"p"},"logValue")," is\nnot recomputed, but simply taken from cache. Using the following utility class,\nwe can obtain for any evaluator a new evaluator, which performs such caching:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"case class CachedEvaluator[A](evaluator: DistributionEvaluator[A]) extends DistributionEvaluator[A] {\n  val memoizedLogValue = Memoize(evaluator.logValue, 10)\n\n  override def logValue(sample: A): Double = {\n    memoizedLogValue(sample)\n  }\n}\n")),Object(r.b)("h4",{id:"the-posterior-evaluator"},"The posterior evaluator"),Object(r.b)("p",null,"Given these evaluators, we can now build the computationally efficient version of\nour target density ",Object(r.b)("span",{parentName:"p",className:"math math-inline"},Object(r.b)("span",{parentName:"span",className:"katex"},Object(r.b)("span",{parentName:"span",className:"katex-mathml"},Object(r.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(r.b)("semantics",{parentName:"math"},Object(r.b)("mrow",{parentName:"semantics"},Object(r.b)("mi",{parentName:"mrow"},"p"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(r.b)("mi",{parentName:"mrow"},"\u03b8"),Object(r.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(r.b)("mi",{parentName:"mrow"},"D"),Object(r.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(r.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(\\theta | D)")))),Object(r.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(r.b)("span",{parentName:"span",className:"base"},Object(r.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(r.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(r.b)("span",{parentName:"span",className:"mopen"},"("),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(r.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(r.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"D"),Object(r.b)("span",{parentName:"span",className:"mclose"},")")))))),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"val likelihoodEvaluator = CachedEvaluator(CorrespondenceEvaluator(model, correspondences))\nval priorEvaluator = CachedEvaluator(PriorEvaluator(model))\n\nval posteriorEvaluator = ProductEvaluator(priorEvaluator, likelihoodEvaluator)\n")),Object(r.b)("h3",{id:"the-proposal-generator"},"The proposal generator"),Object(r.b)("p",null,"As in the previous tutorials, we will use simple random walk proposals.\nWe will define separate proposals for shape, translation and rotation.\nOn one hand, this lets us set the step length (i.e. stddev of the distribution from which we\nsample the next step) individually for each group, and thus to incorporate our knowledge\nthat changes in rotation will be much smaller than the shape changes. On the other hand,\nsplitting the parameter updates in blocks will increase our chance for the random updates\nto be accepted. The reason for this is that when many parameters are updated at one,\nchances are high that some of the proposed changes make the new state more unlikely,\nand hence increase the chance of the new state being rejected."),Object(r.b)("p",null,"The definition of the proposals are straight-forward."),Object(r.b)("p",null,"We start with the shape update proposal:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'case class ShapeUpdateProposal(paramVectorSize: Int, stddev: Double)\n    extends ProposalGenerator[Sample]\n    with TransitionProbability[Sample] {\n\n  val perturbationDistr = new MultivariateNormalDistribution(\n    DenseVector.zeros(paramVectorSize),\n    DenseMatrix.eye[Double](paramVectorSize) * stddev * stddev\n  )\n\n  override def propose(sample: Sample): Sample = {\n    val perturbation = perturbationDistr.sample()\n    val newParameters =\n      sample.parameters.copy(modelCoefficients = sample.parameters.modelCoefficients + perturbationDistr.sample)\n    sample.copy(generatedBy = s"ShapeUpdateProposal ($stddev)", parameters = newParameters)\n  }\n\n  override def logTransitionProbability(from: Sample, to: Sample) = {\n    val residual = to.parameters.modelCoefficients - from.parameters.modelCoefficients\n    perturbationDistr.logpdf(residual)\n  }\n}\n')),Object(r.b)("p",null,"The update of the roation parameters is very similar. Note that we only update the\nrotation parameters, but keep the center of rotation unchanged."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'case class RotationUpdateProposal(stddev: Double)\n    extends ProposalGenerator[Sample]\n    with TransitionProbability[Sample] {\n  val perturbationDistr =\n    new MultivariateNormalDistribution(DenseVector.zeros[Double](3), DenseMatrix.eye[Double](3) * stddev * stddev)\n  def propose(sample: Sample): Sample = {\n    val perturbation = perturbationDistr.sample\n    val newRotationParameters = (\n      sample.parameters.rotationParameters._1 + perturbation(0),\n      sample.parameters.rotationParameters._2 + perturbation(1),\n      sample.parameters.rotationParameters._3 + perturbation(2)\n    )\n    val newParameters = sample.parameters.copy(rotationParameters = newRotationParameters)\n    sample.copy(generatedBy = s"RotationUpdateProposal ($stddev)", parameters = newParameters)\n  }\n  override def logTransitionProbability(from: Sample, to: Sample) = {\n    val residual = DenseVector(\n      to.parameters.rotationParameters._1 - from.parameters.rotationParameters._1,\n      to.parameters.rotationParameters._2 - from.parameters.rotationParameters._2,\n      to.parameters.rotationParameters._3 - from.parameters.rotationParameters._3\n    )\n    perturbationDistr.logpdf(residual)\n  }\n}\n')),Object(r.b)("p",null,"We define a similar proposal for the translation."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'case class TranslationUpdateProposal(stddev: Double)\n    extends ProposalGenerator[Sample]\n    with TransitionProbability[Sample] {\n\n  val perturbationDistr =\n    new MultivariateNormalDistribution(DenseVector.zeros(3), DenseMatrix.eye[Double](3) * stddev * stddev)\n\n  def propose(sample: Sample): Sample = {\n    val newTranslationParameters = sample.parameters.translationParameters + EuclideanVector.fromBreezeVector(\n      perturbationDistr.sample()\n    )\n    val newParameters = sample.parameters.copy(translationParameters = newTranslationParameters)\n    sample.copy(generatedBy = s"TranlationUpdateProposal ($stddev)", parameters = newParameters)\n  }\n\n  override def logTransitionProbability(from: Sample, to: Sample) = {\n    val residual = to.parameters.translationParameters - from.parameters.translationParameters\n    perturbationDistr.logpdf(residual.toBreezeVector)\n  }\n}\n')),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'case class NoiseStddevUpdateProposal(stddev: Double)(implicit rng : scalismo.utils.Random)\n  extends ProposalGenerator[Sample]\n    with TransitionProbability[Sample] {\n\n  val perturbationDistr = breeze.stats.distributions.Gaussian(0, stddev)(rng.breezeRandBasis)\n\n  def propose(sample: Sample): Sample = {\n    val newSigma = sample.parameters.noiseStddev +  perturbationDistr.sample()\n    val newParameters = sample.parameters.copy(noiseStddev = newSigma)\n    sample.copy(generatedBy = s"NoiseStddevUpdateProposal ($stddev)", parameters = newParameters)\n  }\n\n  override def logTransitionProbability(from: Sample, to: Sample) = {\n    val residual = to.parameters.noiseStddev - from.parameters.noiseStddev\n    perturbationDistr.logPdf(residual)\n  }\n}\n')),Object(r.b)("p",null,"The final proposal is a mixture of the  proposals we defined above.\nWe choose to update the shape more often than the translation and rotation parameters,\nas we expect most changes to be shape changes."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"val shapeUpdateProposal = ShapeUpdateProposal(model.rank, 0.1)\nval rotationUpdateProposal = RotationUpdateProposal(0.01)\nval translationUpdateProposal = TranslationUpdateProposal(1.0)\nval noiseStddevUpdateProposal = NoiseStddevUpdateProposal(0.1)\n\nval generator = MixtureProposal.fromProposalsWithTransition(\n  (0.5, shapeUpdateProposal),\n  (0.2, rotationUpdateProposal),\n  (0.2, translationUpdateProposal),\n  (0.1, noiseStddevUpdateProposal)\n)\n")),Object(r.b)("h4",{id:"building-the-markov-chain"},"Building the Markov Chain"),Object(r.b)("p",null,"For running the Markov Chain, we proceed exactly as in the previous tutorial. We start by defining the logger,\nto compute the accept/reject ratios of the individual generators"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"class Logger extends AcceptRejectLogger[Sample] {\n  private val numAccepted = collection.mutable.Map[String, Int]()\n  private val numRejected = collection.mutable.Map[String, Int]()\n\n  override def accept(current: Sample,\n                      sample: Sample,\n                      generator: ProposalGenerator[Sample],\n                      evaluator: DistributionEvaluator[Sample]): Unit = {\n    val numAcceptedSoFar = numAccepted.getOrElseUpdate(sample.generatedBy, 0)\n    numAccepted.update(sample.generatedBy, numAcceptedSoFar + 1)\n  }\n\n  override def reject(current: Sample,\n                      sample: Sample,\n                      generator: ProposalGenerator[Sample],\n                      evaluator: DistributionEvaluator[Sample]): Unit = {\n    val numRejectedSoFar = numRejected.getOrElseUpdate(sample.generatedBy, 0)\n    numRejected.update(sample.generatedBy, numRejectedSoFar + 1)\n  }\n\n  def acceptanceRatios(): Map[String, Double] = {\n    val generatorNames = numRejected.keys.toSet.union(numAccepted.keys.toSet)\n    val acceptanceRatios = for (generatorName <- generatorNames) yield {\n      val total = (numAccepted.getOrElse(generatorName, 0)\n        + numRejected.getOrElse(generatorName, 0)).toDouble\n      (generatorName, numAccepted.getOrElse(generatorName, 0) / total)\n    }\n    acceptanceRatios.toMap\n  }\n}\n")),Object(r.b)("p",null,"We then create the initial sample, where we choose here the center of mass of the model mean as the\nrotation center."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'def computeCenterOfMass(mesh: TriangleMesh[_3D]): Point[_3D] = {\n  val normFactor = 1.0 / mesh.pointSet.numberOfPoints\n  mesh.pointSet.points.foldLeft(Point(0, 0, 0))((sum, point) => sum + point.toVector * normFactor)\n}\n\nval initialParameters = Parameters(\n  translationParameters = EuclideanVector(0, 0, 0),\n  rotationParameters = (0.0, 0.0, 0.0),\n  modelCoefficients = DenseVector.zeros[Double](model.rank),\n  noiseStddev = 1.0\n)\n\nval initialSample = Sample("initial", initialParameters, computeCenterOfMass(model.mean))\n')),Object(r.b)("p",null,Object(r.b)("em",{parentName:"p"},"Remark: Setting the rotation center correctly is very important for the rotation proposal to work as expected.\nFortunately, most of the time this error is easy to diagnose, as the acceptance ratio of the rotation proposal will be unexpectedly low.")),Object(r.b)("p",null,"Next we set up the chain and obtain an iterator."),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"val chain = MetropolisHastings(generator, posteriorEvaluator)\nval logger = new Logger()\nval mhIterator = chain.iterator(initialSample, logger)\n")),Object(r.b)("p",null,"In this example we are interested to visualize some samples from the posterior as we run the chain. This can be done\nby augmenting the iterator with visualization code:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'val samplingIterator = for ((sample, iteration) <- mhIterator.zipWithIndex) yield {\n    println("iteration " + iteration)\n    if (iteration % 500 == 0) {\n      modelView.shapeModelTransformationView.shapeTransformationView.coefficients = sample.parameters.modelCoefficients\n      modelView.shapeModelTransformationView.poseTransformationView.transformation = sample.poseTransformation\n    }\n    sample\n}\n')),Object(r.b)("p",null,"Finally, we draw the samples using the chain by consuming the iterator. We drop the first 1000 iterations, as the\nchain needs some burn-in time to converge to a equilibrium solution:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"val samples = samplingIterator.drop(1000).take(10000).toIndexedSeq\n")),Object(r.b)("p",null,"Before working with the results, we check the acceptance ratios to verify that all the proposals work as expected:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"println(logger.acceptanceRatios())\n// Map(RotationUpdateProposal (0.01) -> 0.27049910873440286, TranlationUpdateProposal (1.0) -> 0.10995475113122172, ShapeUpdateProposal (0.1) -> 0.4661405762525234, NoiseStddevUpdateProposal (0.1) -> 0.8394160583941606)\n")),Object(r.b)("h3",{id:"analyzing-the-results"},"Analyzing the results"),Object(r.b)("p",null,"Once we have the samples, we can now use them to analyze our fit.\nFor example, we can select the best fit from these samples and visualize it"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'val bestSample = samples.maxBy(posteriorEvaluator.logValue)\nval bestFit = model.instance(bestSample.parameters.modelCoefficients).transform(bestSample.poseTransformation)\nval resultGroup = ui.createGroup("result")\nui.show(resultGroup, bestFit, "best fit")\n')),Object(r.b)("p",null,"The samples allow us to infer much more about the distribution. For example, we can estimate the expected position of\nany point in the model and the variance from the samples:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"\ndef computeMean(model: PointDistributionModel[_3D, UnstructuredPointsDomain], id: PointId): Point[_3D] = {\n  var mean = EuclideanVector(0, 0, 0)\n  for (sample <- samples) yield {\n    val modelInstance = model.instance(sample.parameters.modelCoefficients)\n    val pointForInstance = modelInstance.transform(sample.poseTransformation).pointSet.point(id)\n    mean += pointForInstance.toVector\n  }\n  (mean * 1.0 / samples.size).toPoint\n}\n\ndef computeCovarianceFromSamples(model: PointDistributionModel[_3D, UnstructuredPointsDomain],\n                                 id: PointId,\n                                 mean: Point[_3D]): SquareMatrix[_3D] = {\n  var cov = SquareMatrix.zeros[_3D]\n  for (sample <- samples) yield {\n    val modelInstance = model.instance(sample.parameters.modelCoefficients)\n    val pointForInstance = modelInstance.transform(sample.poseTransformation).pointSet.point(id)\n    val v = pointForInstance - mean\n    cov += v.outer(v)\n  }\n  cov * (1.0 / samples.size)\n}\n")),Object(r.b)("p",null,"For efficiency reasons, we do the computations here only for the landmark points, using again the marginalized model:"),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},"val (marginalizedModel, newCorrespondences) = marginalizeModelForCorrespondences(model, correspondences)\n")),Object(r.b)("pre",null,Object(r.b)("code",{parentName:"pre",className:"language-scala"},'for ((id, _) <- newCorrespondences) {\n  val meanPointPosition = computeMean(marginalizedModel, id)\n  println(s"expected position for point at id $id  = $meanPointPosition")\n  val cov = computeCovarianceFromSamples(marginalizedModel, id, meanPointPosition)\n  println(\n    s"posterior variance computed  for point at id (shape and pose) $id  = ${cov(0, 0)}, ${cov(1, 1)}, ${cov(2, 2)}"\n  )\n}\n// expected position for point at id PointId(0)  = Point3D(148.0324861283622,-6.275576357568034,290.59079814866135)\n// posterior variance computed  for point at id (shape and pose) PointId(0)  = 0.5361626780401172, 0.44518844783183426, 0.4712449612711684\n// expected position for point at id PointId(1)  = Point3D(142.25613155050056,-4.578502616840517,267.6662118948927)\n// posterior variance computed  for point at id (shape and pose) PointId(1)  = 0.3358273564280193, 0.27412211397165964, 0.3834512258930212\n// expected position for point at id PointId(2)  = Point3D(141.51450447249726,-5.396538351594542,225.53365136081703)\n// posterior variance computed  for point at id (shape and pose) PointId(2)  = 0.32450811724762585, 0.34599403442859433, 0.38706424978868814\n// expected position for point at id PointId(3)  = Point3D(143.24561920715632,-4.760308138497735,201.7722641818853)\n// posterior variance computed  for point at id (shape and pose) PointId(3)  = 0.5900000898872085, 0.4373150359903246, 0.5292405759059319\n// expected position for point at id PointId(4)  = Point3D(102.70685297949743,32.6549651676325,248.25560554976087)\n// posterior variance computed  for point at id (shape and pose) PointId(4)  = 0.6541511267089476, 0.6578223533565591, 0.44885292685051964\n// expected position for point at id PointId(5)  = Point3D(136.9987480392464,100.7251991156642,249.83446273567114)\n// posterior variance computed  for point at id (shape and pose) PointId(5)  = 0.7664814741591471, 0.7557594068764044, 0.6117844332219701\n')),Object(r.b)("h3",{id:"beyond-landmark-fitting"},"Beyond landmark fitting"),Object(r.b)("p",null,"We have shown above how Scalismo can be used to perform Bayesian model fitting on the example of fitting 3D landmarks. This example\ncan easily be extended to other fitting tasks, such as fitting the model to points with unkown correspondences, fitting shapes in surfaces\nof fitting a model to an image using an Active Shape Model as a likelihood function. In principle, all that is required is to\nchange the likelihood function and rerun the fit.\nIn practice, however, as a change in the likelihood function can dramatically change the posterior density, it is often required\nto tune the proposals, such that good convergence can be achieved. Indeed, finding good proposal distributions is the key to\napplying this method successfully. The more prior knowledge about the target distribution we can incorporate into the proposals,\nthe faster will the chain converge to the equilibrium distribution."),Object(r.b)("p",null,"For more complicated use-cases of this method in image analysis , we refer the interested reader is referred to the paper by S. Sch\xf6nborn et al.\nand references therein:"),Object(r.b)("ul",null,Object(r.b)("li",{parentName:"ul"},'Sch\xf6nborn, Sandro, et al. "Markov chain monte carlo for automated face image analysis." International Journal of Computer Vision 123.2 (2017): 160-183.')))}l.isMDXComponent=!0},154:function(e,a,t){"use strict";t.d(a,"a",(function(){return c})),t.d(a,"b",(function(){return h}));var n=t(0),s=t.n(n);function r(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function o(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function m(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?o(Object(t),!0).forEach((function(a){r(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):o(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function i(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},r=Object.keys(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var r=Object.getOwnPropertySymbols(e);for(n=0;n<r.length;n++)t=r[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var p=s.a.createContext({}),l=function(e){var a=s.a.useContext(p),t=a;return e&&(t="function"==typeof e?e(a):m(m({},a),e)),t},c=function(e){var a=l(e.components);return s.a.createElement(p.Provider,{value:a},e.children)},b={inlineCode:"code",wrapper:function(e){var a=e.children;return s.a.createElement(s.a.Fragment,{},a)}},d=s.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,r=e.originalType,o=e.parentName,p=i(e,["components","mdxType","originalType","parentName"]),c=l(t),d=n,h=c["".concat(o,".").concat(d)]||c[d]||b[d]||r;return t?s.a.createElement(h,m(m({ref:a},p),{},{components:t})):s.a.createElement(h,m({ref:a},p))}));function h(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var r=t.length,o=new Array(r);o[0]=d;var m={};for(var i in a)hasOwnProperty.call(a,i)&&(m[i]=a[i]);m.originalType=e,m.mdxType="string"==typeof e?e:n,o[1]=m;for(var p=2;p<r;p++)o[p]=t[p];return s.a.createElement.apply(null,o)}return s.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"}}]);