(window.webpackJsonp=window.webpackJsonp||[]).push([[33],{154:function(e,a,t){"use strict";t.d(a,"a",(function(){return l})),t.d(a,"b",(function(){return u}));var n=t(0),s=t.n(n);function i(e,a,t){return a in e?Object.defineProperty(e,a,{value:t,enumerable:!0,configurable:!0,writable:!0}):e[a]=t,e}function r(e,a){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var n=Object.getOwnPropertySymbols(e);a&&(n=n.filter((function(a){return Object.getOwnPropertyDescriptor(e,a).enumerable}))),t.push.apply(t,n)}return t}function o(e){for(var a=1;a<arguments.length;a++){var t=null!=arguments[a]?arguments[a]:{};a%2?r(Object(t),!0).forEach((function(a){i(e,a,t[a])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):r(Object(t)).forEach((function(a){Object.defineProperty(e,a,Object.getOwnPropertyDescriptor(t,a))}))}return e}function c(e,a){if(null==e)return{};var t,n,s=function(e,a){if(null==e)return{};var t,n,s={},i=Object.keys(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||(s[t]=e[t]);return s}(e,a);if(Object.getOwnPropertySymbols){var i=Object.getOwnPropertySymbols(e);for(n=0;n<i.length;n++)t=i[n],a.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(e,t)&&(s[t]=e[t])}return s}var m=s.a.createContext({}),p=function(e){var a=s.a.useContext(m),t=a;return e&&(t="function"==typeof e?e(a):o(o({},a),e)),t},l=function(e){var a=p(e.components);return s.a.createElement(m.Provider,{value:a},e.children)},b={inlineCode:"code",wrapper:function(e){var a=e.children;return s.a.createElement(s.a.Fragment,{},a)}},d=s.a.forwardRef((function(e,a){var t=e.components,n=e.mdxType,i=e.originalType,r=e.parentName,m=c(e,["components","mdxType","originalType","parentName"]),l=p(t),d=n,u=l["".concat(r,".").concat(d)]||l[d]||b[d]||i;return t?s.a.createElement(u,o(o({ref:a},m),{},{components:t})):s.a.createElement(u,o({ref:a},m))}));function u(e,a){var t=arguments,n=a&&a.mdxType;if("string"==typeof e||n){var i=t.length,r=new Array(i);r[0]=d;var o={};for(var c in a)hasOwnProperty.call(a,c)&&(o[c]=a[c]);o.originalType=e,o.mdxType="string"==typeof e?e:n,r[1]=o;for(var m=2;m<i;m++)r[m]=t[m];return s.a.createElement.apply(null,r)}return s.a.createElement.apply(null,t)}d.displayName="MDXCreateElement"},98:function(e,a,t){"use strict";t.r(a),t.d(a,"frontMatter",(function(){return r})),t.d(a,"metadata",(function(){return o})),t.d(a,"rightToc",(function(){return c})),t.d(a,"default",(function(){return p}));var n=t(3),s=t(7),i=(t(0),t(154)),r={slug:"pdms-images-scalismo-090",title:"Images in Scalismo 0.90",author:"Marcel L\xfcthi",author_title:"Lecturer, Department of Mathematics and Computer Science, University of Basel",author_url:"https://github.com/marcelluethi/",author_image_url:"https://avatars2.githubusercontent.com/u/1332115?s=400&u=85f196182f47120058b7ae6edd0a41151b77ceb7&v=4",tags:["scalismo","website"]},o={permalink:"/blog/pdms-images-scalismo-090",editUrl:"https://github.com/unibas-gravis/scalismo-microsite/edit/master/website/blog/blog/2020-12-21-images-in-scalismo-090.md",source:"@site/blog/2020-12-21-images-in-scalismo-090.md",description:"Introduction",date:"2020-12-21T00:00:00.000Z",tags:[{label:"scalismo",permalink:"/blog/tags/scalismo"},{label:"website",permalink:"/blog/tags/website"}],title:"Images in Scalismo 0.90",readingTime:5.65,truncated:!1,nextItem:{title:"Point Distribution Models in Scalismo 0.90",permalink:"/blog/pdms-scalismo-090"}},c=[{value:"Introduction",id:"introduction",children:[]},{value:"Continuous and discrete Images",id:"continuous-and-discrete-images",children:[]},{value:"Structured Points",id:"structured-points",children:[]},{value:"Image domain",id:"image-domain",children:[]},{value:"Creating images",id:"creating-images",children:[]},{value:"Interpolation and discretization.",id:"interpolation-and-discretization",children:[]},{value:"Summary",id:"summary",children:[]}],m={rightToc:c};function p(e){var a=e.components,t=Object(s.a)(e,["components"]);return Object(i.b)("wrapper",Object(n.a)({},m,t,{components:a,mdxType:"MDXLayout"}),Object(i.b)("h3",{id:"introduction"},"Introduction"),Object(i.b)("p",null,"The recently released version of Scalismo - version 0.90 - comes with a number of important changes in its\ncore classes. In this blog post, we will look at images. "),Object(i.b)("p",null,"In older versions of Scalismo images had a special status in the library. While conceptually they were thought to be just discrete fields, they were implemented using a number of special classes, representing the differnet types of images.\nThis led to inconsistencies in the\nAPI and complicated the type hierarchy. Even worse, it enforced the wrong notion that image are conceptually different from other representations of\nintensities used in Scalismo. In version 0.90 we cleaned up the hierarchy and removed all the special classes. Discrete images are now simply a special instantiation of a discrete field, whose\ndomain is a regular grid. In the following we explain the underlying concepts, show how we can create images and how\nwe can obtain a continuous from a discrete representations and vice versa."),Object(i.b)("h3",{id:"continuous-and-discrete-images"},"Continuous and discrete Images"),Object(i.b)("p",null,"Similar to other types of representations, images come in two types: Discrete images and continuous images.\nContinuous images are modeled as a ",Object(i.b)("inlineCode",{parentName:"p"},"Field"),"; I.e. they are functions that have a domain ",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"D"),Object(i.b)("mo",{parentName:"mrow"},"\u2282"),Object(i.b)("msup",{parentName:"mrow"},Object(i.b)("mi",{parentName:"msup",mathvariant:"double-struck"},"R"),Object(i.b)("mi",{parentName:"msup"},"d"))),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"D \\subset \\mathbb{R}^d")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.72243em",verticalAlign:"-0.0391em"}}),Object(i.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"D"),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(i.b)("span",{parentName:"span",className:"mrel"},"\u2282"),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.849108em",verticalAlign:"0em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord"},Object(i.b)("span",{parentName:"span",className:"mord mathbb"},"R")),Object(i.b)("span",{parentName:"span",className:"msupsub"},Object(i.b)("span",{parentName:"span",className:"vlist-t"},Object(i.b)("span",{parentName:"span",className:"vlist-r"},Object(i.b)("span",{parentName:"span",className:"vlist",style:{height:"0.849108em"}},Object(i.b)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},Object(i.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(i.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(i.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"d"))))))))))))," and\nmap each point of the domain to some values. The mapped values can be scalars, vectors or even more complicated objects."),Object(i.b)("p",null,"Discrete images in turn are a special case of a discrete field. Discrete fields are defined as a finite set of points, where for each point we have an associated value.\nA discrete image is a discrete field, whose domain is constrained to be a regular grid; I.e. whose domain points are equally spaced. That the points are equally spaces makes\nit possible to represent the domain points implicitly by a mathematical formula rather than having to explicitly store them.\nFurthermore, accessing the image values and looking up closest points becomes a constant time operation."),Object(i.b)("h3",{id:"structured-points"},"Structured Points"),Object(i.b)("p",null,"The basic object to represent such a set of structured points is the class ",Object(i.b)("inlineCode",{parentName:"p"},"StructuredPoints"),".\nWe can create a set of points on a grid as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val origin = Point3D(10.0, 15.0, 7.0) // some point defining the lower left corner of the image\nval spacing = EuclideanVector3D(0.1, 0.1, 0.1) // the spacing between two grid points in each space dimension\nval size = IntVector3D(32, 64, 92) // size in each space dimension\nval points = StructuredPoints3D(origin, spacing, size)\n")),Object(i.b)("p",null,"This creates a grid of points ",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mn",{parentName:"mrow"},"32"),Object(i.b)("mo",{parentName:"mrow"},"\xd7"),Object(i.b)("mn",{parentName:"mrow"},"64"),Object(i.b)("mo",{parentName:"mrow"},"\xd7"),Object(i.b)("mn",{parentName:"mrow"},"92")),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"32 \\times 64 \\times 92")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},"3"),Object(i.b)("span",{parentName:"span",className:"mord"},"2"),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),Object(i.b)("span",{parentName:"span",className:"mbin"},"\xd7"),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.72777em",verticalAlign:"-0.08333em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},"6"),Object(i.b)("span",{parentName:"span",className:"mord"},"4"),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}}),Object(i.b)("span",{parentName:"span",className:"mbin"},"\xd7"),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2222222222222222em"}})),Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},"9"),Object(i.b)("span",{parentName:"span",className:"mord"},"2")))))," points, where the bottom left point is at the ",Object(i.b)("inlineCode",{parentName:"p"},"origin"),",\nand the points are the in the ",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mi",{parentName:"mrow"},"x"),Object(i.b)("mo",{parentName:"mrow",separator:"true"},","),Object(i.b)("mi",{parentName:"mrow"},"y"),Object(i.b)("mo",{parentName:"mrow",separator:"true"},","),Object(i.b)("mi",{parentName:"mrow"},"z")),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"x, y, z")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"x"),Object(i.b)("span",{parentName:"span",className:"mpunct"},","),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(i.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(i.b)("span",{parentName:"span",className:"mpunct"},","),Object(i.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(i.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.04398em"}},"z")))))," direction ",Object(i.b)("span",{parentName:"p",className:"math math-inline"},Object(i.b)("span",{parentName:"span",className:"katex"},Object(i.b)("span",{parentName:"span",className:"katex-mathml"},Object(i.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(i.b)("semantics",{parentName:"math"},Object(i.b)("mrow",{parentName:"semantics"},Object(i.b)("mn",{parentName:"mrow"},"0.1"),Object(i.b)("mi",{parentName:"mrow"},"m"),Object(i.b)("mi",{parentName:"mrow"},"m")),Object(i.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"0.1mm")))),Object(i.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(i.b)("span",{parentName:"span",className:"base"},Object(i.b)("span",{parentName:"span",className:"strut",style:{height:"0.64444em",verticalAlign:"0em"}}),Object(i.b)("span",{parentName:"span",className:"mord"},"0"),Object(i.b)("span",{parentName:"span",className:"mord"},"."),Object(i.b)("span",{parentName:"span",className:"mord"},"1"),Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"m"),Object(i.b)("span",{parentName:"span",className:"mord mathdefault"},"m")))))," apart."),Object(i.b)("p",null,"Note that the grid of points is aligned to the coordinate axis. In case you would like to have a different\nalignment, it is possible to specify a rotation of the points. The rotation is specified by 1 or 3 Euler angles,\ndepending on whether there is a 2 or 3 dimensional image."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val yaw = Math.PI / 2\nval pitch = 0.0\nval roll = Math.PI\nval points2 = StructuredPoints3D(origin, spacing, size, yaw, pitch, roll)\n")),Object(i.b)("h3",{id:"image-domain"},"Image domain"),Object(i.b)("p",null,"The image domain represents a domain, whose points are aligned in a rectangular grid.\nNaturally, it uses ",Object(i.b)("inlineCode",{parentName:"p"},"StructuredPoints")," as a representation of the underlying points of the\ndomain. We can create an image domain from structured points as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val imageDomain = DiscreteImageDomain3D(StructuredPoints3D(origin, spacing, size))\n")),Object(i.b)("p",null,"For convenience, Scalismo also offers the possibility to specify the origin, spacing and size directly, as we did\nfor the structured points."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val imageDomain2 = DiscreteImageDomain3D(origin, spacing, size)\n")),Object(i.b)("p",null,"Note however, that this still creates a structured points object internally."),Object(i.b)("p",null,"As for structured points, we can also define a rotation, by specifying the corresponding\nEuler angles."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val imageDomain3 = DiscreteImageDomain3D(origin, spacing, size, yaw, pitch, roll)\n")),Object(i.b)("p",null,"Finally, we can specify the points by specifying its bounding box together with the information about the spacing or size:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val boundingBox : BoxDomain[_3D] = imageDomain.boundingBox\nval imageDomain4 = DiscreteImageDomain3D(boundingBox, spacing = spacing)\n")),Object(i.b)("p",null,"or"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val imageDomain5 = DiscreteImageDomain3D(boundingBox, size = size)\n")),Object(i.b)("p",null,"This last creation method is particularly useful for changing the resolution of an image,\nas we will see later."),Object(i.b)("h3",{id:"creating-images"},"Creating images"),Object(i.b)("p",null,"To create an image, we need to specify a value for each\npoint in the domain. In this example, we create an image, which assigns a zero value to each point."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val image = DiscreteImage3D(imageDomain, p => 0.toShort)\n")),Object(i.b)("p",null,"Alternatively, we could have specified the values using an array, as follows:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val image2 = DiscreteImage3D(imageDomain, Array.fill(imageDomain.pointSet.numberOfPoints)(0.toShort))\n")),Object(i.b)("p",null,"Note that an image is just another name for a discrete field with a image domain. We could\nhave equally well constructed the image as:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val image3 = DiscreteField3D(imageDomain, p => 0.toShort)\n")),Object(i.b)("h3",{id:"interpolation-and-discretization"},"Interpolation and discretization."),Object(i.b)("p",null,"It is often more convenient to work with a continuous representation of the image.\nTo obtain a continuous image, we use the ",Object(i.b)("inlineCode",{parentName:"p"},"interpolate")," method and specify a suitable\ninterpolator:"),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val continuousImage : Field[_3D, Short] = image.interpolate(BSplineImageInterpolator3D(degree = 3))\n")),Object(i.b)("p",null,"The resulting object is defined on all the points within the bounding box of the image domain.\nTo go back to a discrete representation, we can specify a new image domain and use the\n",Object(i.b)("inlineCode",{parentName:"p"},"discretize")," method. As the new domain could be bigger than the domain of the continuous image,\nwe need to specify a value that is assigned to the points, which fall outside this domain."),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val newDomain = DiscreteImageDomain3D(image.domain.boundingBox, size=IntVector(32, 32, 32))\nval resampledImage : DiscreteImage[_3D, Short] = continuousImage.discretize(newDomain, outsideValue = 0.toShort)\n")),Object(i.b)("p",null,"Of course, we could also resample the continuous image using a different type of domain. Assume for example that we\nhave a CT image of the upper leg, but we are only interested in representing the intensities for the femur bone. We could then\ndiscretize the (interpolated) image using a tetrahederal mesh, and thus obtain a representation of the field which is restricted\nto the femur bone only. "),Object(i.b)("pre",null,Object(i.b)("code",{parentName:"pre",className:"language-scala"},"val femurMesh : TetrahedralMesh[_3D] = ???\nval femurVolumeMeshModel : DiscreteField[_3D, TetrahedralMesh, Short] = continuousImage.discretize(femurMesh)\n")),Object(i.b)("h3",{id:"summary"},"Summary"),Object(i.b)("p",null,"We have discussed the new design of images in Scalismo. Discrete images are modelled as discrete fields, and thus have a domain and\nassociated values attached to it. The points of the domain are represented using the class ",Object(i.b)("inlineCode",{parentName:"p"},"StructuredPoints"),", which\nrepresent points that lie on a regular grid. Exploiting this special structure, we can efficiently access values\nassociated to the grid points in the image, or use dedicated interpolation methods to swich from a discrete to a\ncontinuous representation. Once we have the continuous representation, we can discretize using a different domain, which\nallows us for example to resample the image in a different resolution, restrict the image to a part of the domain or even change the\ntype of the domain. "))}p.isMDXComponent=!0}}]);