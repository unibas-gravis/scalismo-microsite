(window.webpackJsonp=window.webpackJsonp||[]).push([[10],{154:function(e,t,n){"use strict";n.d(t,"a",(function(){return m})),n.d(t,"b",(function(){return b}));var o=n(0),r=n.n(o);function a(e,t,n){return t in e?Object.defineProperty(e,t,{value:n,enumerable:!0,configurable:!0,writable:!0}):e[t]=n,e}function i(e,t){var n=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);t&&(o=o.filter((function(t){return Object.getOwnPropertyDescriptor(e,t).enumerable}))),n.push.apply(n,o)}return n}function s(e){for(var t=1;t<arguments.length;t++){var n=null!=arguments[t]?arguments[t]:{};t%2?i(Object(n),!0).forEach((function(t){a(e,t,n[t])})):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(n)):i(Object(n)).forEach((function(t){Object.defineProperty(e,t,Object.getOwnPropertyDescriptor(n,t))}))}return e}function l(e,t){if(null==e)return{};var n,o,r=function(e,t){if(null==e)return{};var n,o,r={},a=Object.keys(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||(r[n]=e[n]);return r}(e,t);if(Object.getOwnPropertySymbols){var a=Object.getOwnPropertySymbols(e);for(o=0;o<a.length;o++)n=a[o],t.indexOf(n)>=0||Object.prototype.propertyIsEnumerable.call(e,n)&&(r[n]=e[n])}return r}var c=r.a.createContext({}),d=function(e){var t=r.a.useContext(c),n=t;return e&&(n="function"==typeof e?e(t):s(s({},t),e)),n},m=function(e){var t=d(e.components);return r.a.createElement(c.Provider,{value:t},e.children)},p={inlineCode:"code",wrapper:function(e){var t=e.children;return r.a.createElement(r.a.Fragment,{},t)}},u=r.a.forwardRef((function(e,t){var n=e.components,o=e.mdxType,a=e.originalType,i=e.parentName,c=l(e,["components","mdxType","originalType","parentName"]),m=d(n),u=o,b=m["".concat(i,".").concat(u)]||m[u]||p[u]||a;return n?r.a.createElement(b,s(s({ref:t},c),{},{components:n})):r.a.createElement(b,s({ref:t},c))}));function b(e,t){var n=arguments,o=t&&t.mdxType;if("string"==typeof e||o){var a=n.length,i=new Array(a);i[0]=u;var s={};for(var l in t)hasOwnProperty.call(t,l)&&(s[l]=t[l]);s.originalType=e,s.mdxType="string"==typeof e?e:o,i[1]=s;for(var c=2;c<a;c++)i[c]=n[c];return r.a.createElement.apply(null,i)}return r.a.createElement.apply(null,n)}u.displayName="MDXCreateElement"},71:function(e,t,n){"use strict";n.r(t),n.d(t,"frontMatter",(function(){return i})),n.d(t,"metadata",(function(){return s})),n.d(t,"rightToc",(function(){return l})),n.d(t,"default",(function(){return d}));var o=n(3),r=n(7),a=(n(0),n(154)),i={id:"tutorial9",title:"Shape completion using Gaussian process regression"},s={unversionedId:"tutorials/tutorial9",id:"version-0.18/tutorials/tutorial9",isDocsHomePage:!1,title:"Shape completion using Gaussian process regression",description:"In this tutorial we will show how GP regression can be used to predict missing parts of a shape.",source:"@site/versioned_docs/version-0.18/tutorials/tutorial9.md",slug:"/tutorials/tutorial9",permalink:"/docs/0.18/tutorials/tutorial9",editUrl:"https://github.com/unibas-gravis/scalismo-microsite/edit/master/website/versioned_docs/version-0.18/tutorials/tutorial9.md",version:"0.18",sidebar:"version-0.18/docs",previous:{title:"Posterior Shape Models",permalink:"/docs/0.18/tutorials/tutorial8"},next:{title:"Iterative Closest Points for rigid alignment",permalink:"/docs/0.18/tutorials/tutorial10"}},l=[{value:"Enlarging the flexibility of a shape model",id:"enlarging-the-flexibility-of-a-shape-model",children:[]}],c={rightToc:l};function d(e){var t=e.components,n=Object(r.a)(e,["components"]);return Object(a.b)("wrapper",Object(o.a)({},c,n,{components:t,mdxType:"MDXLayout"}),Object(a.b)("p",null,"In this tutorial we will show how GP regression can be used to predict missing parts of a shape."),Object(a.b)("h5",{id:"preparation"},"Preparation"),Object(a.b)("p",null,"As in the previous tutorials, we start by importing some commonly used objects and initializing the system."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},"import scalismo.geometry._\nimport scalismo.common._\nimport scalismo.ui.api._\nimport scalismo.mesh._\nimport scalismo.io.{StatisticalModelIO, MeshIO, LandmarkIO}\nimport scalismo.statisticalmodel._\nimport scalismo.numerics.UniformMeshSampler3D\nimport scalismo.kernels._\nimport breeze.linalg.{DenseMatrix, DenseVector}\n\nscalismo.initialize()\nimplicit val rng = scalismo.utils.Random(42)\n\nval ui = ScalismoUI()\n")),Object(a.b)("p",null,"We also load a dataset that we want to reconstruct. In this case, it is a face without nose:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'val noseless = MeshIO.readMesh(new java.io.File("datasets/noseless.ply")).get\n\nval targetGroup = ui.createGroup("target")\nui.show(targetGroup, noseless,"noseless")\n')),Object(a.b)("p",null,"Finally, we also load the face model."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'val smallModel = StatisticalModelIO.readStatisticalMeshModel(new java.io.File("datasets/model.h5")).get\n')),Object(a.b)("h2",{id:"enlarging-the-flexibility-of-a-shape-model"},"Enlarging the flexibility of a shape model"),Object(a.b)("p",null,"The model, which we just loaded, was built from only a small dataset. Therefore, the chances that it manages to\nreconstruct the missing nose properly are rather slim."),Object(a.b)("p",null,"To increase the shape variability of the model, we add smooth some additional smooth shape deformations,\nmodelled by a GP with symmetric Gaussian kernel. The code should be familiar from the previous tutorials."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'val scalarValuedKernel = GaussianKernel[_3D](70) * 10.0\n\ncase class XmirroredKernel(kernel : PDKernel[_3D]) extends PDKernel[_3D] {\n  override def domain = RealSpace[_3D]\n  override def k(x: Point[_3D], y: Point[_3D]) = kernel(Point(x(0) * -1f ,x(1), x(2)), y)\n}\n\ndef symmetrizeKernel(kernel : PDKernel[_3D]) : MatrixValuedPDKernel[_3D] = {\n   val xmirrored = XmirroredKernel(kernel)\n   val k1 = DiagonalKernel(kernel, 3)\n   val k2 = DiagonalKernel(xmirrored * -1f, xmirrored, xmirrored)\n   k1 + k2\n}\n\nval gp = GaussianProcess[_3D, EuclideanVector[_3D]](symmetrizeKernel(scalarValuedKernel))\nval lowrankGP = LowRankGaussianProcess.approximateGPCholesky(\n    smallModel.referenceMesh.pointSet,\n    gp,\n    relativeTolerance = 0.01,\n    interpolator = NearestNeighborInterpolator())\n\nval model = StatisticalMeshModel.augmentModel(smallModel, lowrankGP)\n\nval modelGroup = ui.createGroup("face model")\nval ssmView = ui.show(modelGroup, model, "model")\n')),Object(a.b)("p",null,"The new model should now contain much more flexibility, while still preserving the typical face-specific deformations."),Object(a.b)("p",null,Object(a.b)("em",{parentName:"p"},"Note: This step here is mainly motivated by the fact that we only have 10 face examples available to build the model. However,\neven if sufficient data is available, it might still be a good idea to slighly enlarge the flexibility of a model\nbefore attempting a reconstruction of missing parts. It gives the model some extra slack to account for\nbias in the data and explain minor shape variations, which have not been prominent in the dataset"),"."),Object(a.b)("p",null,"Equipped with our new model, we will perform the reconstruction in three steps:"),Object(a.b)("ol",null,Object(a.b)("li",{parentName:"ol"},"We fit the face model to the given partial face using Gaussian process regression."),Object(a.b)("li",{parentName:"ol"},"We restrict the model to the nose part by marginalizing and select a suitable nose shape."),Object(a.b)("li",{parentName:"ol"},"We choose a suitable nose from the model")),Object(a.b)("p",null,"As we saw previously, to perform GP regression we need observations of the deformation vectors at some points.\nWe will discussed in ",Object(a.b)("a",{parentName:"p",href:"tutorial10"},"Tutorial 10")," how such observations can be obtained fully automatically.\nHere, we have done this already in a separate step and saved 200 corresponding points as landmarks, which we will now load and visualize:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'val referenceLandmarks = LandmarkIO.readLandmarksJson[_3D](new java.io.File("datasets/modelLandmarks.json")).get\nval referencePoints : Seq[Point[_3D]] = referenceLandmarks.map(lm => lm.point)\nval referenceLandmarkViews = referenceLandmarks.map(lm => ui.show(modelGroup, lm, s"lm-${lm.id}"))\n\n\nval noselessLandmarks = LandmarkIO.readLandmarksJson[_3D](new java.io.File("datasets/noselessLandmarks.json")).get\nval noselessPoints : Seq[Point[_3D]] = noselessLandmarks.map(lm => lm.point)\nval noselessLandmarkViews = noselessLandmarks.map(lm => ui.show(targetGroup, lm, s"lm-${lm.id}"))\n')),Object(a.b)("p",null,"These correspondences define how each selected point of the\nmodel should be deformed to its corresponding point on the target mesh.\nIn other words, we ",Object(a.b)("strong",{parentName:"p"},"observed")," a few deformation vectors at\nthe selected model points. We use these deformation vectors and build\na deformation field:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'val domain = UnstructuredPointsDomain(referencePoints.toIndexedSeq)\nval deformations = (0 until referencePoints.size).map(i => noselessPoints(i) - referencePoints(i) )\nval defField = DiscreteField[_3D, UnstructuredPointsDomain[_3D], EuclideanVector[_3D]](domain, deformations)\nui.show(modelGroup, defField, "partial_Field")\n')),Object(a.b)("p",null,"We can now perform GP regression and retrieve the rest of the deformations fitting our observations:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'val littleNoise = MultivariateNormalDistribution(DenseVector.zeros[Double](3), DenseMatrix.eye[Double](3) * 0.5)\n\nval regressionData = for ((refPoint, noselessPoint) <- referencePoints zip noselessPoints) yield {\n    val refPointId = model.referenceMesh.pointSet.findClosestPoint(refPoint).id\n    (refPointId, noselessPoint, littleNoise)\n}\n\nval posterior = model.posterior(regressionData.toIndexedSeq)\n\nval posteriorGroup = ui.createGroup("posterior-model")\nui.show(posteriorGroup, posterior, "posterior")\n')),Object(a.b)("p",null,"With this posterior model, we get a normal distribution of faces satisfying our observations by having the selected characteristic points at the indicated positions."),Object(a.b)("p",null,"Finally, as we are interested in the nose region only, we marginalize our posterior to obtain a posterior nose model as we did in a previous tutorial:"),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},'\nval nosePtIDs = model.referenceMesh.pointSet.pointIds.filter { id =>\n  (model.referenceMesh.pointSet.point(id) - model.referenceMesh.pointSet.point(PointId(8152))).norm <= 42\n}\n\nval posteriorNoseModel = posterior.marginal(nosePtIDs.toIndexedSeq)\n\nval posteriorNoseGroup = ui.createGroup("posterior-nose-model")\nui.show(posteriorNoseGroup, posteriorNoseModel, "posteriorNoseModel")\n')),Object(a.b)("p",null,"We now have a probability distribution over fitting nose shapes. Our last\ntask is to select one nose as a reconstruction.  A simple and often\nreasonable choice is to use the mean of this model, as this is the reconstruction\nwith the highest probability under the model."),Object(a.b)("pre",null,Object(a.b)("code",{parentName:"pre",className:"language-scala"},"val bestReconstruction = posteriorNoseModel.mean\n")),Object(a.b)("p",null,"Having a full posterior distribution\nover fitting nose shapes gives us, however, much more freedom in choosing a\nreconstruction. By introducing a utility function, which models the utility of each reconstruction for a given task,\nwe can use this distribution as the basis for decision making by minimizing the expected posterior loss."))}d.isMDXComponent=!0}}]);