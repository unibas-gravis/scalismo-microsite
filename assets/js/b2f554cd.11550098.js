"use strict";(self.webpackChunkwebsite=self.webpackChunkwebsite||[]).push([[1477],{10:function(e){e.exports=JSON.parse('{"blogPosts":[{"id":"java-on-osx-problem","metadata":{"permalink":"/blog/java-on-osx-problem","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-12-17-java-osx.md","source":"@site/blog/2021-12-17-java-osx.md","title":"Java version problem for OSX: SIGABRT in IntelliJ","description":"Java continues to be a challenge on the OSX platform. We have recently experienced just how sensitive Scalismo is to using the correct Java version.","date":"2021-12-17T00:00:00.000Z","formattedDate":"December 17, 2021","tags":[{"label":"osx","permalink":"/blog/tags/osx"},{"label":"java","permalink":"/blog/tags/java"},{"label":"IntelliJ","permalink":"/blog/tags/intelli-j"}],"readingTime":1.115,"truncated":false,"authors":[{"name":"Dennis Madsen","title":"Researcher, Department of Mathematics and Computer Science, University of Basel","url":"https://dennismadsen.me","imageURL":"https://avatars.githubusercontent.com/u/12571611?v=4"}],"frontMatter":{"slug":"java-on-osx-problem","title":"Java version problem for OSX: SIGABRT in IntelliJ","author":"Dennis Madsen","author_title":"Researcher, Department of Mathematics and Computer Science, University of Basel","author_url":"https://dennismadsen.me","author_image_url":"https://avatars.githubusercontent.com/u/12571611?v=4","tags":["osx","java","IntelliJ"]},"nextItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"}},"content":"Java continues to be a challenge on the OSX platform. We have recently experienced just how sensitive Scalismo is to using the correct Java version. \\n\\nAs explained in the [setup guide](https://scalismo.org/docs/ide), we encourage people to install the Zulu version 11.0-9 of JVM using the command line. \\n\\nHowever, when using Zulu JDK in IntelliJ, there is no option to select the specific minor version 9. Unfortunately, the newest version does not always work and might result in the following error when initializing Scalismo:\\n```\\nlibc++abi: terminating with uncaught exception of type NSException\\n\\nProcess finished with exit code 134 (interrupted by signal 6: SIGABRT)\\n```\\nTo fix this, we have to manually import the Zulu 11.0-9 JDK downloaded with Coursier from the command line. To do so, we need to know the `java.home` directory. This can be found by starting `sbt` and invoking:\\n```\\neval System.getProperty(\\"java.home\\")\\n```\\nThis will produce an output similar to:\\n```\\n[info] ans: String = /Users/USERNAME/Library/Caches/Coursier/jvm/zulu@1.11.0-9/zulu-11.jdk/Contents/Home\\n```\\nIn IntelliJ click File -> Project structure ... -> In the project tap, select `Add SDK` -> `JDK...` (as shown in below image):\\n\\n![IntelliJ Project Structure](images/project-structure-jdk-highlight.png)\\n\\nWe now have to navigate to the folder. Note that the `Library` folder is hidden, and so to see hidden folders, click: CMD+shift+. \\n\\nApply changes and make sure that the SDK is set to the correct Zulu JDK."},{"id":"mdx-blog-post","metadata":{"permalink":"/blog/mdx-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2021-08-01-mdx-blog-post.mdx","source":"@site/blog/2021-08-01-mdx-blog-post.mdx","title":"MDX Blog Post","description":"Blog posts support Docusaurus Markdown features, such as MDX.","date":"2021-08-01T00:00:00.000Z","formattedDate":"August 1, 2021","tags":[{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.175,"truncated":false,"authors":[{"name":"S\xe9bastien Lorber","title":"Docusaurus maintainer","url":"https://sebastienlorber.com","imageURL":"https://github.com/slorber.png","key":"slorber"}],"frontMatter":{"slug":"mdx-blog-post","title":"MDX Blog Post","authors":["slorber"],"tags":["docusaurus"]},"prevItem":{"title":"Java version problem for OSX: SIGABRT in IntelliJ","permalink":"/blog/java-on-osx-problem"},"nextItem":{"title":"Images in Scalismo 0.90","permalink":"/blog/pdms-images-scalismo-090"}},"content":"Blog posts support [Docusaurus Markdown features](https://docusaurus.io/docs/markdown-features), such as [MDX](https://mdxjs.com/).\\r\\n\\r\\n:::tip\\r\\n\\r\\nUse the power of React to create interactive blog posts.\\r\\n\\r\\n```js\\r\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\r\\n```\\r\\n\\r\\n<button onClick={() => alert(\'button clicked!\')}>Click me!</button>\\r\\n\\r\\n:::"},{"id":"pdms-images-scalismo-090","metadata":{"permalink":"/blog/pdms-images-scalismo-090","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2020-12-21-images-in-scalismo-090.md","source":"@site/blog/2020-12-21-images-in-scalismo-090.md","title":"Images in Scalismo 0.90","description":"Introduction","date":"2020-12-21T00:00:00.000Z","formattedDate":"December 21, 2020","tags":[{"label":"scalismo","permalink":"/blog/tags/scalismo"},{"label":"website","permalink":"/blog/tags/website"}],"readingTime":5.65,"truncated":false,"authors":[{"name":"Marcel L\xfcthi","title":"Lecturer, Department of Mathematics and Computer Science, University of Basel","url":"https://github.com/marcelluethi/","imageURL":"https://avatars2.githubusercontent.com/u/1332115?s=400&u=85f196182f47120058b7ae6edd0a41151b77ceb7&v=4"}],"frontMatter":{"slug":"pdms-images-scalismo-090","title":"Images in Scalismo 0.90","author":"Marcel L\xfcthi","author_title":"Lecturer, Department of Mathematics and Computer Science, University of Basel","author_url":"https://github.com/marcelluethi/","author_image_url":"https://avatars2.githubusercontent.com/u/1332115?s=400&u=85f196182f47120058b7ae6edd0a41151b77ceb7&v=4","tags":["scalismo","website"]},"prevItem":{"title":"MDX Blog Post","permalink":"/blog/mdx-blog-post"},"nextItem":{"title":"Point Distribution Models in Scalismo 0.90","permalink":"/blog/pdms-scalismo-090"}},"content":"### Introduction\\n\\nThe recently released version of Scalismo - version 0.90 - comes with a number of important changes in its\\ncore classes. In this blog post, we will look at images. \\n\\nIn older versions of Scalismo images had a special status in the library. While conceptually they were thought to be just discrete fields, they were implemented using a number of special classes, representing the differnet types of images. \\nThis led to inconsistencies in the \\nAPI and complicated the type hierarchy. Even worse, it enforced the wrong notion that image are conceptually different from other representations of \\nintensities used in Scalismo. In version 0.90 we cleaned up the hierarchy and removed all the special classes. Discrete images are now simply a special instantiation of a discrete field, whose\\ndomain is a regular grid. In the following we explain the underlying concepts, show how we can create images and how \\nwe can obtain a continuous from a discrete representations and vice versa.\\n\\n### Continuous and discrete Images\\n\\nSimilar to other types of representations, images come in two types: Discrete images and continuous images.\\nContinuous images are modeled as a ```Field```; I.e. they are functions that have a domain $$D \\\\subset \\\\mathbb{R}^d$$ and\\nmap each point of the domain to some values. The mapped values can be scalars, vectors or even more complicated objects.\\n\\nDiscrete images in turn are a special case of a discrete field. Discrete fields are defined as a finite set of points, where for each point we have an associated value. \\nA discrete image is a discrete field, whose domain is constrained to be a regular grid; I.e. whose domain points are equally spaced. That the points are equally spaces makes\\nit possible to represent the domain points implicitly by a mathematical formula rather than having to explicitly store them.\\nFurthermore, accessing the image values and looking up closest points becomes a constant time operation.\\n\\n### Structured Points\\n\\nThe basic object to represent such a set of structured points is the class ```StructuredPoints```.\\nWe can create a set of points on a grid as follows:\\n\\n```scala\\nval origin = Point3D(10.0, 15.0, 7.0) // some point defining the lower left corner of the image\\nval spacing = EuclideanVector3D(0.1, 0.1, 0.1) // the spacing between two grid points in each space dimension\\nval size = IntVector3D(32, 64, 92) // size in each space dimension\\nval points = StructuredPoints3D(origin, spacing, size)\\n```\\nThis creates a grid of points $$32 \\\\times 64 \\\\times 92$$ points, where the bottom left point is at the ```origin```,\\nand the points are the in the $$x, y, z$$ direction $$0.1mm$$ apart.\\n\\nNote that the grid of points is aligned to the coordinate axis. In case you would like to have a different\\nalignment, it is possible to specify a rotation of the points. The rotation is specified by 1 or 3 Euler angles,\\ndepending on whether there is a 2 or 3 dimensional image.\\n```scala\\nval yaw = Math.PI / 2\\nval pitch = 0.0\\nval roll = Math.PI\\nval points2 = StructuredPoints3D(origin, spacing, size, yaw, pitch, roll)\\n```\\n\\n### Image domain\\n\\nThe image domain represents a domain, whose points are aligned in a rectangular grid.\\nNaturally, it uses ```StructuredPoints``` as a representation of the underlying points of the\\ndomain. We can create an image domain from structured points as follows:\\n```scala\\nval imageDomain = DiscreteImageDomain3D(StructuredPoints3D(origin, spacing, size))\\n``` \\n\\nFor convenience, Scalismo also offers the possibility to specify the origin, spacing and size directly, as we did\\nfor the structured points.\\n```scala\\nval imageDomain2 = DiscreteImageDomain3D(origin, spacing, size)\\n```\\nNote however, that this still creates a structured points object internally.\\n\\n\\nAs for structured points, we can also define a rotation, by specifying the corresponding\\nEuler angles.\\n```scala\\nval imageDomain3 = DiscreteImageDomain3D(origin, spacing, size, yaw, pitch, roll)\\n```\\n\\nFinally, we can specify the points by specifying its bounding box together with the information about the spacing or size:\\n```scala\\nval boundingBox : BoxDomain[_3D] = imageDomain.boundingBox\\nval imageDomain4 = DiscreteImageDomain3D(boundingBox, spacing = spacing)\\n```\\nor\\n```scala\\nval imageDomain5 = DiscreteImageDomain3D(boundingBox, size = size)\\n```\\n\\nThis last creation method is particularly useful for changing the resolution of an image,\\nas we will see later.\\n\\n### Creating images\\nTo create an image, we need to specify a value for each\\npoint in the domain. In this example, we create an image, which assigns a zero value to each point.\\n```scala\\nval image = DiscreteImage3D(imageDomain, p => 0.toShort)\\n```\\nAlternatively, we could have specified the values using an array, as follows:\\n```scala\\nval image2 = DiscreteImage3D(imageDomain, Array.fill(imageDomain.pointSet.numberOfPoints)(0.toShort))\\n```\\nNote that an image is just another name for a discrete field with a image domain. We could\\nhave equally well constructed the image as:\\n```scala\\nval image3 = DiscreteField3D(imageDomain, p => 0.toShort)\\n```\\n\\n### Interpolation and discretization.\\n\\nIt is often more convenient to work with a continuous representation of the image. \\nTo obtain a continuous image, we use the ```interpolate``` method and specify a suitable\\ninterpolator:\\n```scala\\nval continuousImage : Field[_3D, Short] = image.interpolate(BSplineImageInterpolator3D(degree = 3))\\n``` \\nThe resulting object is defined on all the points within the bounding box of the image domain.\\nTo go back to a discrete representation, we can specify a new image domain and use the\\n```discretize``` method. As the new domain could be bigger than the domain of the continuous image,\\nwe need to specify a value that is assigned to the points, which fall outside this domain.\\n\\n```scala\\nval newDomain = DiscreteImageDomain3D(image.domain.boundingBox, size=IntVector(32, 32, 32))\\nval resampledImage : DiscreteImage[_3D, Short] = continuousImage.discretize(newDomain, outsideValue = 0.toShort)\\n``` \\n\\nOf course, we could also resample the continuous image using a different type of domain. Assume for example that we\\nhave a CT image of the upper leg, but we are only interested in representing the intensities for the femur bone. We could then \\ndiscretize the (interpolated) image using a tetrahederal mesh, and thus obtain a representation of the field which is restricted\\nto the femur bone only. \\n```scala\\nval femurMesh : TetrahedralMesh[_3D] = ???\\nval femurVolumeMeshModel : DiscreteField[_3D, TetrahedralMesh, Short] = continuousImage.discretize(femurMesh)\\n```\\n\\n### Summary \\n\\nWe have discussed the new design of images in Scalismo. Discrete images are modelled as discrete fields, and thus have a domain and \\nassociated values attached to it. The points of the domain are represented using the class ```StructuredPoints```, which \\nrepresent points that lie on a regular grid. Exploiting this special structure, we can efficiently access values \\nassociated to the grid points in the image, or use dedicated interpolation methods to swich from a discrete to a \\ncontinuous representation. Once we have the continuous representation, we can discretize using a different domain, which \\nallows us for example to resample the image in a different resolution, restrict the image to a part of the domain or even change the \\ntype of the domain."},{"id":"pdms-scalismo-090","metadata":{"permalink":"/blog/pdms-scalismo-090","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2020-12-19-pdms-in-scalismo-090.md","source":"@site/blog/2020-12-19-pdms-in-scalismo-090.md","title":"Point Distribution Models in Scalismo 0.90","description":"Introduction","date":"2020-12-19T00:00:00.000Z","formattedDate":"December 19, 2020","tags":[{"label":"scalismo","permalink":"/blog/tags/scalismo"},{"label":"website","permalink":"/blog/tags/website"}],"readingTime":5.89,"truncated":false,"authors":[{"name":"Marcel L\xfcthi","title":"Lecturer, Department of Mathematics and Computer Science, University of Basel","url":"https://github.com/marcelluethi/","imageURL":"https://avatars2.githubusercontent.com/u/1332115?s=400&u=85f196182f47120058b7ae6edd0a41151b77ceb7&v=4"}],"frontMatter":{"slug":"pdms-scalismo-090","title":"Point Distribution Models in Scalismo 0.90","author":"Marcel L\xfcthi","author_title":"Lecturer, Department of Mathematics and Computer Science, University of Basel","author_url":"https://github.com/marcelluethi/","author_image_url":"https://avatars2.githubusercontent.com/u/1332115?s=400&u=85f196182f47120058b7ae6edd0a41151b77ceb7&v=4","tags":["scalismo","website"]},"prevItem":{"title":"Images in Scalismo 0.90","permalink":"/blog/pdms-images-scalismo-090"},"nextItem":{"title":"Welcome","permalink":"/blog/welcome"}},"content":"### Introduction\\n\\nThe recently released version of Scalismo - version 0.90 - comes with a number of important changes in its\\ncore classes. In this blog post we will look at the class ```PointDistributionModel```, which replaces and \\ngeneralizes ```StatisticalMeshModel```. \\n\\nWe start by discussing the differences to the previous implementation. We then show how to create Point Distribution Models. \\nIn the last part we will discuss how we can change the domain over which the Point Distribution Model is defined. This allows us to change\\nthe resolution of the model, restrict the model to a subset of the original domain, or even to change the type of domain over which the model is defined.   \\n\\n### From StatisticalMeshModel to PointDistributionModel\\n\\nRecall that shape variations are modelled using Gaussian processes in Scalismo. More precisely,\\nwe use a low-rank approximation of a Gaussian process, which models a probability distribution over deformation fields,\\n\\n```scala\\nval lowrankGP : LowRankGaussianProcess[_3D, EuclideanVector[_3D]] = ???\\n```\\nThe type signature indicates that the Gaussian process is defined in 3D space and it represents a \\ncollection of random variables over 3D vectors in Euclidean space.\\n\\n\\nA ```StatisticalMeshModel``` is the restriction of this continuously defined Gaussian Process to\\na discrete and finite set of points. This set of points is defined to be the vertices of a triangle mesh, \\nwhich is called the reference mesh. \\nThus, a ```StatisticalMeshModel``` is just an aggregate of a mesh and a corresponding Gaussian process, \\nrestricted to the points of the reference mesh. This is reflected in the definition in Scalismo: \\n\\n```scala\\ncase class StatisticalMeshModel (referenceMesh: TriangleMesh[_3D],\\n                                 gp: DiscreteLowRankGaussianProcess[_3D, TriangleMesh, EuclideanVector[_3D]]) \\n```\\n \\nWhen we draw a sample from this model, we actually draw a sample from the Gaussian process and apply\\nthe sampled deformation field to the points of the reference mesh. The resulting sample is the deformed version of the reference mesh.\\n\\n```scala\\nval ssm : StatisticalMeshModel = ???\\nval sample : TriangleMesh[_3D] = ssm.sample\\n```\\n\\nFrom this description it becomes obvious how we can generalize this to other types of datasets. \\nAs we only use the points of the mesh, we can relax the restriction that the reference has to be a triangle mesh. \\nInstead, we assume that the dataset is defined on a finite set of points. In Scalismo, a dataset which is defined on \\na finite set of points is modelled as a subtype of the class ```DiscreteDomain```. This is the basis of the definition of \\na ```PointDistributionModel```:\\n\\n```scala\\ncase class PointDistributionModel[D, DDomain[D] <: DiscreteDomain[D]](\\n    reference : DDomain[D], \\n    gp: DiscreteLowRankGaussianProcess[D, DDomain, EuclideanVector[D]]\\n ) (implicit warper: DomainWarp[D, DDomain])\\n```\\nHere we replaced ```TriangleMesh``` by the generic type ```DDomain```, which can be any subtype \\nof a ```DiscreteDomain```. The implicit argument ```warper``` restricts the domains further to domains\\nthat can be deformed. In Scalismo these are currently the classes ```TriangleMesh```, \\n```TetrahedralMesh```, ```LineMesh``` and ```UnstructuredPointsDomain```.<sup>[1](#myfootnote1)</sup> \\n\\nIn the actual Scalismo implementation, the definition of the class ```PointDistributionModel``` is even a bit simpler.\\nThe reference is assumed to coincide with the domain over which the (discrete) Gaussian process is defined. Therefore, \\nwe do not even need to explicitly represent it as part of the class ```PointDistributionModel```.\\n\\n\\n\\n\\n### Creating and working with Point Distribution Models\\n\\nNow that we know what a Point Distribution Model is, we will show how we work with them in Scalismo.\\nOur first example illustrates how to learn a Point Distribution Model of tetrahedral meshes from given example meshes.\\nThis is simple: We create a data collection, where we provide a sequence of tetrahedral meshes and use the method ```createUsingPCA``` \\nto create the model:\\n```scala\\nval referenceMesh: TetrahedralMesh[_3D] = ???\\nval trainingMeshes: Seq[TetrahedralMesh[_3D]] = ???\\nval dataCollection = DataCollection.fromTetrahedralMeshSequence(referenceMesh, trainingMeshes)\\nval pdmTetraMesh = PointDistributionModel.createUsingPCA(dataCollection)\\n```\\n\\nAs expected, samples from this model are valid tetrahedral meshes.\\n```scala\\nval sample: scalismo.mesh.TetrahedralMesh[_3D] = pdmTetraMesh.sample()\\n```\\nCreating models of other types of data sets works exactly in the same way. We simply change the corresponding type\\nof the reference and the data collection. \\n\\n```scala\\nval referenceMesh: TriangleMesh[_3D] = ???\\nval trainingMeshes: Seq[TriangleMesh[_3D]] = ???\\nval dataCollection = DataCollection.fromTriangleMeshSequence(referenceMesh, trainingMeshes)\\nval pdmTriangleMesh = PointDistributionModel.createUsingPCA(dataCollection)\\n```\\n\\n\\nA second way to create a PDMs is to specify a low rank Gaussian process as well as a reference mesh on which \\nthe Gp will be discretized:\\n```scala\\nval lowRankGP : LowRankGaussianProcess[_3D, EuclideanVector[_3D]] = ???\\nval reference : TriangleMesh[_3D] = ???\\nval pdmTriangleMesh  : PointDistributionModel[_3D, TriangleMesh] = PointDistributionModel(reference, lowRankGP)\\n```\\nAgain, samples from the model will have the correct type:\\n```scala\\nval sample : TriangleMesh[_3D] = pdmTriangleMesh.sample\\n```\\n\\n### Changing the domain\\n\\nThe new implementation opens an interesting new possibility: We can \\nchange the domain over which the point distribution model is defined. \\nTo achieve this, we call the methods ```newReference``` and provide as an argument the new reference mesh\\nand an interpolator. Internally, the interpolator is used to obtain a continuously defined ```LowRankGaussianProcess```\\nfrom the ```DiscreteLowRankGaussianProcess```. From above discussion we already know how to create a PDM from a ```reference``` and \\na ```LowRankGaussianProcess```. This is exactly what is done behind the scenes when we call ```newReference```.  \\n\\nIn the following example we show how we can use this method to obtain a \\nPDM of a triangle mesh from a model defined over tetrahedral meshes. As the new reference \\nwe use the outer surface of the tetrahedral mesh over which the original PDM is defined\\n\\n```scala\\nval triangleRefMesh: TriangleMesh[_3D] = pdmTetraMesh.reference.getOuterSurface\\nval pdmOuterSurface : PointDistributionModel[_3D, TriangleMesh] = pdm.newReference(triangleRefMesh, BarycentricInterpolator3D())\\n```\\n\\nAnother common use case for this method is to restrict the model to a subset of the vertices on \\nwhich the PDM is defined. This can either be used for restricting the model to a part of the domain, or to change\\nthe resolution of the domain. This latter use case is illustrated in the following code:\\n```scala\\nval decimatedMesh = pdmTriangleMesh.reference.operations.decimate(targetNumberOfVertices = 100) \\nval pdmTriangleDecimated = pdmTriangle.newReference(decimatedMesh, TriangleMeshInterpolato3Dr())\\n```\\n\\nHaving an easily accessible method to change the points on which the PDM is defined, makes it possible to choose\\nthe appropriate mesh resolution for each task. We might for example want to start with a high resolution model, which result in \\nvisually pleasing samples when rendered, but reduce the mesh resolution when fitting the model, in order to save computation time.\\n\\n### Summary\\nWe have seen that the new PDM class generalizes the concept of ```StatisticalMeshModel``` from previous versions of Scalismo. \\nThe newly introduced class ```PointDistributionModel``` can be defined over any subtype of ```DiscreteDomain```, which supports a warping operation. \\nBesides triangle and tetrahedral meshes, this includes line meshes and unstructured point domains. \\nAnother notable feature of Point Distribution Model is that it provides a method to change the \\ndomain over which the PDM is defined. This makes it possible to restrict a Gaussian process model to a part of the domain, \\nchange the type of the domain or to change its resolution. \\n\\n\\n#### Footnotes\\n\\n<a name=\\"footnote1\\">1</a>: An example for a discrete domain, which cannot be used as a basis for a PDM is a\\n\\n```DiscreteImage```. The reason is that an image is defined on a regular grid, but once we warp the grid\\nit is not regular anymore and hence not an image."},{"id":"welcome","metadata":{"permalink":"/blog/welcome","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2020-11-21-welcome.md","source":"@site/blog/2020-11-21-welcome.md","title":"Welcome","description":"Scalismo has a new website. It is powered by Docosaurus.","date":"2020-11-21T00:00:00.000Z","formattedDate":"November 21, 2020","tags":[{"label":"scalismo","permalink":"/blog/tags/scalismo"},{"label":"website","permalink":"/blog/tags/website"}],"readingTime":0.05,"truncated":false,"authors":[{"name":"Marcel L\xfcthi","title":"Researcher, Department of Mathematics and Computer Science, University of Basel","url":"https://github.com/marcelluethi/","imageURL":"https://avatars2.githubusercontent.com/u/1332115?s=400&u=85f196182f47120058b7ae6edd0a41151b77ceb7&v=4"}],"frontMatter":{"slug":"welcome","title":"Welcome","author":"Marcel L\xfcthi","author_title":"Researcher, Department of Mathematics and Computer Science, University of Basel","author_url":"https://github.com/marcelluethi/","author_image_url":"https://avatars2.githubusercontent.com/u/1332115?s=400&u=85f196182f47120058b7ae6edd0a41151b77ceb7&v=4","tags":["scalismo","website"]},"prevItem":{"title":"Point Distribution Models in Scalismo 0.90","permalink":"/blog/pdms-scalismo-090"},"nextItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Scalismo has a new website. It is powered by [Docosaurus](https://docusaurus.io/)."},{"id":"long-blog-post","metadata":{"permalink":"/blog/long-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-29-long-blog-post.md","source":"@site/blog/2019-05-29-long-blog-post.md","title":"Long Blog Post","description":"This is the summary of a very long blog post,","date":"2019-05-29T00:00:00.000Z","formattedDate":"May 29, 2019","tags":[{"label":"hello","permalink":"/blog/tags/hello"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":2.05,"truncated":true,"authors":[{"name":"Endilie Yacop Sucipto","title":"Maintainer of Docusaurus","url":"https://github.com/endiliey","imageURL":"https://github.com/endiliey.png","key":"endi"}],"frontMatter":{"slug":"long-blog-post","title":"Long Blog Post","authors":"endi","tags":["hello","docusaurus"]},"prevItem":{"title":"Welcome","permalink":"/blog/welcome"},"nextItem":{"title":"First Blog Post","permalink":"/blog/first-blog-post"}},"content":"This is the summary of a very long blog post,\\r\\n\\r\\nUse a `\x3c!--` `truncate` `--\x3e` comment to limit blog post size in the list view.\\r\\n\\r\\n\x3c!--truncate--\x3e\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet\\r\\n\\r\\nLorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"},{"id":"first-blog-post","metadata":{"permalink":"/blog/first-blog-post","editUrl":"https://github.com/facebook/docusaurus/tree/main/packages/create-docusaurus/templates/shared/blog/2019-05-28-first-blog-post.md","source":"@site/blog/2019-05-28-first-blog-post.md","title":"First Blog Post","description":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet","date":"2019-05-28T00:00:00.000Z","formattedDate":"May 28, 2019","tags":[{"label":"hola","permalink":"/blog/tags/hola"},{"label":"docusaurus","permalink":"/blog/tags/docusaurus"}],"readingTime":0.12,"truncated":false,"authors":[{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"}],"frontMatter":{"slug":"first-blog-post","title":"First Blog Post","authors":{"name":"Gao Wei","title":"Docusaurus Core Team","url":"https://github.com/wgao19","image_url":"https://github.com/wgao19.png","imageURL":"https://github.com/wgao19.png"},"tags":["hola","docusaurus"]},"prevItem":{"title":"Long Blog Post","permalink":"/blog/long-blog-post"}},"content":"Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet"}]}')}}]);