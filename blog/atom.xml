<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
    <id>https://scalismo.org/blog</id>
    <title>Scalismo Blog</title>
    <updated>2021-12-17T00:00:00.000Z</updated>
    <generator>https://github.com/jpmonette/feed</generator>
    <link rel="alternate" href="https://scalismo.org/blog"/>
    <subtitle>Scalismo Blog</subtitle>
    <icon>https://scalismo.org/img/favicon.png</icon>
    <entry>
        <title type="html"><![CDATA[Java version problem for OSX: SIGABRT in IntelliJ]]></title>
        <id>java-on-osx-problem</id>
        <link href="https://scalismo.org/blog/java-on-osx-problem"/>
        <updated>2021-12-17T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Java continues to be a challenge on the OSX platform. We have recently experienced just how sensitive Scalismo is to using the correct Java version.]]></summary>
        <content type="html"><![CDATA[<p>Java continues to be a challenge on the OSX platform. We have recently experienced just how sensitive Scalismo is to using the correct Java version. </p><p>As explained in the <a href="https://scalismo.org/docs/ide" target="_blank" rel="noopener noreferrer">setup guide</a>, we encourage people to install the Zulu version 11.0-9 of JVM using the command line. </p><p>However, when using Zulu JDK in IntelliJ, there is no option to select the specific minor version 9. Unfortunately, the newest version does not always work and might result in the following error when initializing Scalismo:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">libc++abi: terminating with uncaught exception of type NSException</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain" style="display:inline-block"></span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">Process finished with exit code 134 (interrupted by signal 6: SIGABRT)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>To fix this, we have to manually import the Zulu 11.0-9 JDK downloaded with Coursier from the command line. To do so, we need to know the <code>java.home</code> directory. This can be found by starting <code>sbt</code> and invoking:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">eval System.getProperty("java.home")</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>This will produce an output similar to:</p><div class="codeBlockContainer_I0IT theme-code-block"><div class="codeBlockContent_wNvx"><pre tabindex="0" class="prism-code language-text codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">[info] ans: String = /Users/USERNAME/Library/Caches/Coursier/jvm/zulu@1.11.0-9/zulu-11.jdk/Contents/Home</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>In IntelliJ click File -&gt; Project structure ... -&gt; In the project tap, select <code>Add SDK</code> -&gt; <code>JDK...</code> (as shown in below image):</p><p><img alt="IntelliJ Project Structure" src="/assets/images/project-structure-jdk-highlight-131ab61830a332b1c59a1a0ca551d263.png" width="1790" height="1090"></p><p>We now have to navigate to the folder. Note that the <code>Library</code> folder is hidden, and so to see hidden folders, click: CMD+shift+. </p><p>Apply changes and make sure that the SDK is set to the correct Zulu JDK.</p>]]></content>
        <author>
            <name>Dennis Madsen</name>
            <uri>https://dennismadsen.me</uri>
        </author>
        <category label="osx" term="osx"/>
        <category label="java" term="java"/>
        <category label="IntelliJ" term="IntelliJ"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[MDX Blog Post]]></title>
        <id>mdx-blog-post</id>
        <link href="https://scalismo.org/blog/mdx-blog-post"/>
        <updated>2021-08-01T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Blog posts support Docusaurus Markdown features, such as MDX.]]></summary>
        <content type="html"><![CDATA[<p>Blog posts support <a href="https://docusaurus.io/docs/markdown-features" target="_blank" rel="noopener noreferrer">Docusaurus Markdown features</a>, such as <a href="https://mdxjs.com/" target="_blank" rel="noopener noreferrer">MDX</a>.</p><div class="admonition admonition-tip alert alert--success"><div class="admonition-heading"><h5><span class="admonition-icon"><svg xmlns="http://www.w3.org/2000/svg" width="12" height="16" viewBox="0 0 12 16"><path fill-rule="evenodd" d="M6.5 0C3.48 0 1 2.19 1 5c0 .92.55 2.25 1 3 1.34 2.25 1.78 2.78 2 4v1h5v-1c.22-1.22.66-1.75 2-4 .45-.75 1-2.08 1-3 0-2.81-2.48-5-5.5-5zm3.64 7.48c-.25.44-.47.8-.67 1.11-.86 1.41-1.25 2.06-1.45 3.23-.02.05-.02.11-.02.17H5c0-.06 0-.13-.02-.17-.2-1.17-.59-1.83-1.45-3.23-.2-.31-.42-.67-.67-1.11C2.44 6.78 2 5.65 2 5c0-2.2 2.02-4 4.5-4 1.22 0 2.36.42 3.22 1.19C10.55 2.94 11 3.94 11 5c0 .66-.44 1.78-.86 2.48zM4 14h5c-.23 1.14-1.3 2-2.5 2s-2.27-.86-2.5-2z"></path></svg></span>tip</h5></div><div class="admonition-content"><p>Use the power of React to create interactive blog posts.</p><div class="codeBlockContainer_I0IT language-js theme-code-block"><div class="codeBlockContent_wNvx js"><pre tabindex="0" class="prism-code language-js codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token operator" style="color:#393A34">&lt;</span><span class="token plain">button onClick</span><span class="token operator" style="color:#393A34">=</span><span class="token punctuation" style="color:#393A34">{</span><span class="token punctuation" style="color:#393A34">(</span><span class="token punctuation" style="color:#393A34">)</span><span class="token plain"> </span><span class="token arrow operator" style="color:#393A34">=&gt;</span><span class="token plain"> </span><span class="token function" style="color:#d73a49">alert</span><span class="token punctuation" style="color:#393A34">(</span><span class="token string" style="color:#e3116c">'button clicked!'</span><span class="token punctuation" style="color:#393A34">)</span><span class="token punctuation" style="color:#393A34">}</span><span class="token operator" style="color:#393A34">&gt;</span><span class="token maybe-class-name">Click</span><span class="token plain"> me</span><span class="token operator" style="color:#393A34">!</span><span class="token operator" style="color:#393A34">&lt;</span><span class="token operator" style="color:#393A34">/</span><span class="token plain">button</span><span class="token operator" style="color:#393A34">&gt;</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><button>Click me!</button></div></div>]]></content>
        <author>
            <name>Sébastien Lorber</name>
            <uri>https://sebastienlorber.com</uri>
        </author>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Images in Scalismo 0.90]]></title>
        <id>pdms-images-scalismo-090</id>
        <link href="https://scalismo.org/blog/pdms-images-scalismo-090"/>
        <updated>2020-12-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_mojV" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h3><p>The recently released version of Scalismo - version 0.90 - comes with a number of important changes in its
core classes. In this blog post, we will look at images. </p><p>In older versions of Scalismo images had a special status in the library. While conceptually they were thought to be just discrete fields, they were implemented using a number of special classes, representing the differnet types of images.
This led to inconsistencies in the
API and complicated the type hierarchy. Even worse, it enforced the wrong notion that image are conceptually different from other representations of
intensities used in Scalismo. In version 0.90 we cleaned up the hierarchy and removed all the special classes. Discrete images are now simply a special instantiation of a discrete field, whose
domain is a regular grid. In the following we explain the underlying concepts, show how we can create images and how
we can obtain a continuous from a discrete representations and vice versa.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="continuous-and-discrete-images">Continuous and discrete Images<a class="hash-link" href="#continuous-and-discrete-images" title="Direct link to heading">​</a></h3><p>Similar to other types of representations, images come in two types: Discrete images and continuous images.
Continuous images are modeled as a <code>Field</code>; I.e. they are functions that have a domain $$D \subset \mathbb{R}^d$$ and
map each point of the domain to some values. The mapped values can be scalars, vectors or even more complicated objects.</p><p>Discrete images in turn are a special case of a discrete field. Discrete fields are defined as a finite set of points, where for each point we have an associated value.
A discrete image is a discrete field, whose domain is constrained to be a regular grid; I.e. whose domain points are equally spaced. That the points are equally spaces makes
it possible to represent the domain points implicitly by a mathematical formula rather than having to explicitly store them.
Furthermore, accessing the image values and looking up closest points becomes a constant time operation.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="structured-points">Structured Points<a class="hash-link" href="#structured-points" title="Direct link to heading">​</a></h3><p>The basic object to represent such a set of structured points is the class <code>StructuredPoints</code>.
We can create a set of points on a grid as follows:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val origin = Point3D(10.0, 15.0, 7.0) // some point defining the lower left corner of the image</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val spacing = EuclideanVector3D(0.1, 0.1, 0.1) // the spacing between two grid points in each space dimension</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val size = IntVector3D(32, 64, 92) // size in each space dimension</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val points = StructuredPoints3D(origin, spacing, size)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>This creates a grid of points $$32 \times 64 \times 92$$ points, where the bottom left point is at the <code>origin</code>,
and the points are the in the $$x, y, z$$ direction $$0.1mm$$ apart.</p><p>Note that the grid of points is aligned to the coordinate axis. In case you would like to have a different
alignment, it is possible to specify a rotation of the points. The rotation is specified by 1 or 3 Euler angles,
depending on whether there is a 2 or 3 dimensional image.</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val yaw = Math.PI / 2</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val pitch = 0.0</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val roll = Math.PI</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val points2 = StructuredPoints3D(origin, spacing, size, yaw, pitch, roll)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="image-domain">Image domain<a class="hash-link" href="#image-domain" title="Direct link to heading">​</a></h3><p>The image domain represents a domain, whose points are aligned in a rectangular grid.
Naturally, it uses <code>StructuredPoints</code> as a representation of the underlying points of the
domain. We can create an image domain from structured points as follows:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val imageDomain = DiscreteImageDomain3D(StructuredPoints3D(origin, spacing, size))</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>For convenience, Scalismo also offers the possibility to specify the origin, spacing and size directly, as we did
for the structured points.</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val imageDomain2 = DiscreteImageDomain3D(origin, spacing, size)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Note however, that this still creates a structured points object internally.</p><p>As for structured points, we can also define a rotation, by specifying the corresponding
Euler angles.</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val imageDomain3 = DiscreteImageDomain3D(origin, spacing, size, yaw, pitch, roll)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Finally, we can specify the points by specifying its bounding box together with the information about the spacing or size:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val boundingBox : BoxDomain[_3D] = imageDomain.boundingBox</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val imageDomain4 = DiscreteImageDomain3D(boundingBox, spacing = spacing)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>or</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val imageDomain5 = DiscreteImageDomain3D(boundingBox, size = size)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>This last creation method is particularly useful for changing the resolution of an image,
as we will see later.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="creating-images">Creating images<a class="hash-link" href="#creating-images" title="Direct link to heading">​</a></h3><p>To create an image, we need to specify a value for each
point in the domain. In this example, we create an image, which assigns a zero value to each point.</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val image = DiscreteImage3D(imageDomain, p =&gt; 0.toShort)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Alternatively, we could have specified the values using an array, as follows:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val image2 = DiscreteImage3D(imageDomain, Array.fill(imageDomain.pointSet.numberOfPoints)(0.toShort))</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Note that an image is just another name for a discrete field with a image domain. We could
have equally well constructed the image as:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val image3 = DiscreteField3D(imageDomain, p =&gt; 0.toShort)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="interpolation-and-discretization">Interpolation and discretization.<a class="hash-link" href="#interpolation-and-discretization" title="Direct link to heading">​</a></h3><p>It is often more convenient to work with a continuous representation of the image.
To obtain a continuous image, we use the <code>interpolate</code> method and specify a suitable
interpolator:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val continuousImage : Field[_3D, Short] = image.interpolate(BSplineImageInterpolator3D(degree = 3))</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The resulting object is defined on all the points within the bounding box of the image domain.
To go back to a discrete representation, we can specify a new image domain and use the
<code>discretize</code> method. As the new domain could be bigger than the domain of the continuous image,
we need to specify a value that is assigned to the points, which fall outside this domain.</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val newDomain = DiscreteImageDomain3D(image.domain.boundingBox, size=IntVector(32, 32, 32))</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val resampledImage : DiscreteImage[_3D, Short] = continuousImage.discretize(newDomain, outsideValue = 0.toShort)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Of course, we could also resample the continuous image using a different type of domain. Assume for example that we
have a CT image of the upper leg, but we are only interested in representing the intensities for the femur bone. We could then
discretize the (interpolated) image using a tetrahederal mesh, and thus obtain a representation of the field which is restricted
to the femur bone only. </p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val femurMesh : TetrahedralMesh[_3D] = ???</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val femurVolumeMeshModel : DiscreteField[_3D, TetrahedralMesh, Short] = continuousImage.discretize(femurMesh)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h3><p>We have discussed the new design of images in Scalismo. Discrete images are modelled as discrete fields, and thus have a domain and
associated values attached to it. The points of the domain are represented using the class <code>StructuredPoints</code>, which
represent points that lie on a regular grid. Exploiting this special structure, we can efficiently access values
associated to the grid points in the image, or use dedicated interpolation methods to swich from a discrete to a
continuous representation. Once we have the continuous representation, we can discretize using a different domain, which
allows us for example to resample the image in a different resolution, restrict the image to a part of the domain or even change the
type of the domain.</p>]]></content>
        <author>
            <name>Marcel Lüthi</name>
            <uri>https://github.com/marcelluethi/</uri>
        </author>
        <category label="scalismo" term="scalismo"/>
        <category label="website" term="website"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Point Distribution Models in Scalismo 0.90]]></title>
        <id>pdms-scalismo-090</id>
        <link href="https://scalismo.org/blog/pdms-scalismo-090"/>
        <updated>2020-12-19T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Introduction]]></summary>
        <content type="html"><![CDATA[<h3 class="anchor anchorWithStickyNavbar_mojV" id="introduction">Introduction<a class="hash-link" href="#introduction" title="Direct link to heading">​</a></h3><p>The recently released version of Scalismo - version 0.90 - comes with a number of important changes in its
core classes. In this blog post we will look at the class <code>PointDistributionModel</code>, which replaces and
generalizes <code>StatisticalMeshModel</code>. </p><p>We start by discussing the differences to the previous implementation. We then show how to create Point Distribution Models.
In the last part we will discuss how we can change the domain over which the Point Distribution Model is defined. This allows us to change
the resolution of the model, restrict the model to a subset of the original domain, or even to change the type of domain over which the model is defined.   </p><h3 class="anchor anchorWithStickyNavbar_mojV" id="from-statisticalmeshmodel-to-pointdistributionmodel">From StatisticalMeshModel to PointDistributionModel<a class="hash-link" href="#from-statisticalmeshmodel-to-pointdistributionmodel" title="Direct link to heading">​</a></h3><p>Recall that shape variations are modelled using Gaussian processes in Scalismo. More precisely,
we use a low-rank approximation of a Gaussian process, which models a probability distribution over deformation fields,</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val lowrankGP : LowRankGaussianProcess[_3D, EuclideanVector[_3D]] = ???</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>The type signature indicates that the Gaussian process is defined in 3D space and it represents a
collection of random variables over 3D vectors in Euclidean space.</p><p>A <code>StatisticalMeshModel</code> is the restriction of this continuously defined Gaussian Process to
a discrete and finite set of points. This set of points is defined to be the vertices of a triangle mesh,
which is called the reference mesh.
Thus, a <code>StatisticalMeshModel</code> is just an aggregate of a mesh and a corresponding Gaussian process,
restricted to the points of the reference mesh. This is reflected in the definition in Scalismo: </p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">case class StatisticalMeshModel (referenceMesh: TriangleMesh[_3D],</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">                                 gp: DiscreteLowRankGaussianProcess[_3D, TriangleMesh, EuclideanVector[_3D]]) </span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>When we draw a sample from this model, we actually draw a sample from the Gaussian process and apply
the sampled deformation field to the points of the reference mesh. The resulting sample is the deformed version of the reference mesh.</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val ssm : StatisticalMeshModel = ???</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val sample : TriangleMesh[_3D] = ssm.sample</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>From this description it becomes obvious how we can generalize this to other types of datasets.
As we only use the points of the mesh, we can relax the restriction that the reference has to be a triangle mesh.
Instead, we assume that the dataset is defined on a finite set of points. In Scalismo, a dataset which is defined on
a finite set of points is modelled as a subtype of the class <code>DiscreteDomain</code>. This is the basis of the definition of
a <code>PointDistributionModel</code>:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">case class PointDistributionModel[D, DDomain[D] &lt;: DiscreteDomain[D]](</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    reference : DDomain[D], </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">    gp: DiscreteLowRankGaussianProcess[D, DDomain, EuclideanVector[D]]</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain"> ) (implicit warper: DomainWarp[D, DDomain])</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Here we replaced <code>TriangleMesh</code> by the generic type <code>DDomain</code>, which can be any subtype
of a <code>DiscreteDomain</code>. The implicit argument <code>warper</code> restricts the domains further to domains
that can be deformed. In Scalismo these are currently the classes <code>TriangleMesh</code>,
<code>TetrahedralMesh</code>, <code>LineMesh</code> and <code>UnstructuredPointsDomain</code>.<sup><a href="#myfootnote1">1</a></sup> </p><p>In the actual Scalismo implementation, the definition of the class <code>PointDistributionModel</code> is even a bit simpler.
The reference is assumed to coincide with the domain over which the (discrete) Gaussian process is defined. Therefore,
we do not even need to explicitly represent it as part of the class <code>PointDistributionModel</code>.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="creating-and-working-with-point-distribution-models">Creating and working with Point Distribution Models<a class="hash-link" href="#creating-and-working-with-point-distribution-models" title="Direct link to heading">​</a></h3><p>Now that we know what a Point Distribution Model is, we will show how we work with them in Scalismo.
Our first example illustrates how to learn a Point Distribution Model of tetrahedral meshes from given example meshes.
This is simple: We create a data collection, where we provide a sequence of tetrahedral meshes and use the method <code>createUsingPCA</code>
to create the model:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val referenceMesh: TetrahedralMesh[_3D] = ???</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val trainingMeshes: Seq[TetrahedralMesh[_3D]] = ???</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val dataCollection = DataCollection.fromTetrahedralMeshSequence(referenceMesh, trainingMeshes)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val pdmTetraMesh = PointDistributionModel.createUsingPCA(dataCollection)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>As expected, samples from this model are valid tetrahedral meshes.</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val sample: scalismo.mesh.TetrahedralMesh[_3D] = pdmTetraMesh.sample()</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Creating models of other types of data sets works exactly in the same way. We simply change the corresponding type
of the reference and the data collection. </p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val referenceMesh: TriangleMesh[_3D] = ???</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val trainingMeshes: Seq[TriangleMesh[_3D]] = ???</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val dataCollection = DataCollection.fromTriangleMeshSequence(referenceMesh, trainingMeshes)</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val pdmTriangleMesh = PointDistributionModel.createUsingPCA(dataCollection)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>A second way to create a PDMs is to specify a low rank Gaussian process as well as a reference mesh on which
the Gp will be discretized:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val lowRankGP : LowRankGaussianProcess[_3D, EuclideanVector[_3D]] = ???</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val reference : TriangleMesh[_3D] = ???</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val pdmTriangleMesh  : PointDistributionModel[_3D, TriangleMesh] = PointDistributionModel(reference, lowRankGP)</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Again, samples from the model will have the correct type:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val sample : TriangleMesh[_3D] = pdmTriangleMesh.sample</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><h3 class="anchor anchorWithStickyNavbar_mojV" id="changing-the-domain">Changing the domain<a class="hash-link" href="#changing-the-domain" title="Direct link to heading">​</a></h3><p>The new implementation opens an interesting new possibility: We can
change the domain over which the point distribution model is defined.
To achieve this, we call the methods <code>newReference</code> and provide as an argument the new reference mesh
and an interpolator. Internally, the interpolator is used to obtain a continuously defined <code>LowRankGaussianProcess</code>
from the <code>DiscreteLowRankGaussianProcess</code>. From above discussion we already know how to create a PDM from a <code>reference</code> and
a <code>LowRankGaussianProcess</code>. This is exactly what is done behind the scenes when we call <code>newReference</code>.  </p><p>In the following example we show how we can use this method to obtain a
PDM of a triangle mesh from a model defined over tetrahedral meshes. As the new reference
we use the outer surface of the tetrahedral mesh over which the original PDM is defined</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val triangleRefMesh: TriangleMesh[_3D] = pdmTetraMesh.reference.getOuterSurface</span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val pdmOuterSurface : PointDistributionModel[_3D, TriangleMesh] = pdm.newReference(triangleRefMesh, BarycentricInterpolator3D())</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Another common use case for this method is to restrict the model to a subset of the vertices on
which the PDM is defined. This can either be used for restricting the model to a part of the domain, or to change
the resolution of the domain. This latter use case is illustrated in the following code:</p><div class="codeBlockContainer_I0IT language-scala theme-code-block"><div class="codeBlockContent_wNvx scala"><pre tabindex="0" class="prism-code language-scala codeBlock_jd64 thin-scrollbar" style="color:#393A34;background-color:#f6f8fa"><code class="codeBlockLines_mRuA"><span class="token-line" style="color:#393A34"><span class="token plain">val decimatedMesh = pdmTriangleMesh.reference.operations.decimate(targetNumberOfVertices = 100) </span><br></span><span class="token-line" style="color:#393A34"><span class="token plain">val pdmTriangleDecimated = pdmTriangle.newReference(decimatedMesh, TriangleMeshInterpolato3Dr())</span><br></span></code></pre><button type="button" aria-label="Copy code to clipboard" class="copyButton_wuS7 clean-btn">Copy</button></div></div><p>Having an easily accessible method to change the points on which the PDM is defined, makes it possible to choose
the appropriate mesh resolution for each task. We might for example want to start with a high resolution model, which result in
visually pleasing samples when rendered, but reduce the mesh resolution when fitting the model, in order to save computation time.</p><h3 class="anchor anchorWithStickyNavbar_mojV" id="summary">Summary<a class="hash-link" href="#summary" title="Direct link to heading">​</a></h3><p>We have seen that the new PDM class generalizes the concept of <code>StatisticalMeshModel</code> from previous versions of Scalismo.
The newly introduced class <code>PointDistributionModel</code> can be defined over any subtype of <code>DiscreteDomain</code>, which supports a warping operation.
Besides triangle and tetrahedral meshes, this includes line meshes and unstructured point domains.
Another notable feature of Point Distribution Model is that it provides a method to change the
domain over which the PDM is defined. This makes it possible to restrict a Gaussian process model to a part of the domain,
change the type of the domain or to change its resolution. </p><h4 class="anchor anchorWithStickyNavbar_mojV" id="footnotes">Footnotes<a class="hash-link" href="#footnotes" title="Direct link to heading">​</a></h4><a name="footnote1">1</a>: An example for a discrete domain, which cannot be used as a basis for a PDM is a<p><code>DiscreteImage</code>. The reason is that an image is defined on a regular grid, but once we warp the grid
it is not regular anymore and hence not an image.</p>]]></content>
        <author>
            <name>Marcel Lüthi</name>
            <uri>https://github.com/marcelluethi/</uri>
        </author>
        <category label="scalismo" term="scalismo"/>
        <category label="website" term="website"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Welcome]]></title>
        <id>welcome</id>
        <link href="https://scalismo.org/blog/welcome"/>
        <updated>2020-11-21T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Scalismo has a new website. It is powered by Docosaurus.]]></summary>
        <content type="html"><![CDATA[<p>Scalismo has a new website. It is powered by <a href="https://docusaurus.io/" target="_blank" rel="noopener noreferrer">Docosaurus</a>.</p>]]></content>
        <author>
            <name>Marcel Lüthi</name>
            <uri>https://github.com/marcelluethi/</uri>
        </author>
        <category label="scalismo" term="scalismo"/>
        <category label="website" term="website"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[Long Blog Post]]></title>
        <id>long-blog-post</id>
        <link href="https://scalismo.org/blog/long-blog-post"/>
        <updated>2019-05-29T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[This is the summary of a very long blog post,]]></summary>
        <content type="html"><![CDATA[<p>This is the summary of a very long blog post,</p><p>Use a <code>&lt;!--</code> <code>truncate</code> <code>--&gt;</code> comment to limit blog post size in the list view.</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p><p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content>
        <author>
            <name>Endilie Yacop Sucipto</name>
            <uri>https://github.com/endiliey</uri>
        </author>
        <category label="hello" term="hello"/>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
    <entry>
        <title type="html"><![CDATA[First Blog Post]]></title>
        <id>first-blog-post</id>
        <link href="https://scalismo.org/blog/first-blog-post"/>
        <updated>2019-05-28T00:00:00.000Z</updated>
        <summary type="html"><![CDATA[Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet]]></summary>
        <content type="html"><![CDATA[<p>Lorem ipsum dolor sit amet, consectetur adipiscing elit. Pellentesque elementum dignissim ultricies. Fusce rhoncus ipsum tempor eros aliquam consequat. Lorem ipsum dolor sit amet</p>]]></content>
        <author>
            <name>Gao Wei</name>
            <uri>https://github.com/wgao19</uri>
        </author>
        <category label="hola" term="hola"/>
        <category label="docusaurus" term="docusaurus"/>
    </entry>
</feed>