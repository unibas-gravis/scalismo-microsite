(window.webpackJsonp=window.webpackJsonp||[]).push([[39],{105:function(a,e,t){"use strict";t.r(e),t.d(e,"frontMatter",(function(){return r})),t.d(e,"metadata",(function(){return c})),t.d(e,"rightToc",(function(){return b})),t.d(e,"default",(function(){return i}));var s=t(3),n=t(7),m=(t(0),t(160)),p=["components"],r={id:"tutorial14",title:"Model fitting using MCMC - The basic framework"},c={unversionedId:"tutorials/tutorial14",id:"version-0.18/tutorials/tutorial14",isDocsHomePage:!1,title:"Model fitting using MCMC - The basic framework",description:"In this tutorial we show how Bayesian model fitting using Markov Chain Monte Carlo can be done in Scalismo. To be able",source:"@site/versioned_docs/version-0.18/tutorials/tutorial14.md",slug:"/tutorials/tutorial14",permalink:"/docs/0.18/tutorials/tutorial14",editUrl:"https://github.com/unibas-gravis/scalismo-microsite/edit/master/website/versioned_docs/version-0.18/tutorials/tutorial14.md",version:"0.18",sidebar:"version-0.18/docs",previous:{title:"Active Shape Model fitting",permalink:"/docs/0.18/tutorials/tutorial13"},next:{title:"Model fitting using MCMC - Fitting a shape model",permalink:"/docs/0.18/tutorials/tutorial15"}},b=[{value:"Problem setting",id:"problem-setting",children:[]},{value:"Metropolis Hastings Algorithm",id:"metropolis-hastings-algorithm",children:[]},{value:"Implementation in Scalismo",id:"implementation-in-scalismo",children:[]}],l={rightToc:b};function i(a){var e=a.components,t=Object(n.a)(a,p);return Object(m.b)("wrapper",Object(s.a)({},l,t,{components:e,mdxType:"MDXLayout"}),Object(m.b)("p",null,"In this tutorial we show how Bayesian model fitting using Markov Chain Monte Carlo can be done in Scalismo. To be able\nto focus on the main components of the framework instead of technical details, we start in this tutorial with a simple toy example from statistics.\nAlthough the example has nothing to do with shape modelling, the modelling principles and the steps involve to do the inference are\nexactly the same. The application to shape modelling is discussed in depth in the next tutorial."),Object(m.b)("h3",{id:"problem-setting"},"Problem setting"),Object(m.b)("p",null,"The problem we are considering here is a simple toy problem from Bayesian statistics: We are trying to fit a (univariate) normal distribution ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"N"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03bc"),Object(m.b)("mo",{parentName:"mrow",separator:"true"},","),Object(m.b)("mi",{parentName:"mrow"},"\u03c3"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"N(\\mu, \\sigma)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.10903em"}},"N"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"\u03bc"),Object(m.b)("span",{parentName:"span",className:"mpunct"},","),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"\u03c3"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),",\nwith unknown mean and unknown standard deviation to a set of data points.\nIn the following we will denote the unknown parameters by ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"\u03b8")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"))))),"; I.e. ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03bc"),Object(m.b)("mo",{parentName:"mrow",separator:"true"},","),Object(m.b)("mi",{parentName:"mrow"},"\u03c3"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta = (\\mu, \\sigma)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"="),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"\u03bc"),Object(m.b)("span",{parentName:"span",className:"mpunct"},","),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"\u03c3"),Object(m.b)("span",{parentName:"span",className:"mclose"},")")))))," and the observed data points\nby ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"y")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"))))),". In a Bayesian setting, doing inference means that we compute the ",Object(m.b)("em",{parentName:"p"},"posterior distribution")," ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(\\theta | y)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),". Formally, the ",Object(m.b)("em",{parentName:"p"},"posterior distribution")," is defined as follows:"),Object(m.b)("p",null,Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mfrac",{parentName:"mrow"},Object(m.b)("mrow",{parentName:"mfrac"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mo",{parentName:"mrow"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("mrow",{parentName:"mfrac"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")))),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(\\theta \\mid y) = \\frac{p(\\theta) p(y \\mid \\theta)}{p(y)}")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"="),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1.53em",verticalAlign:"-0.52em"}}),Object(m.b)("span",{parentName:"span",className:"mord"},Object(m.b)("span",{parentName:"span",className:"mopen nulldelimiter"}),Object(m.b)("span",{parentName:"span",className:"mfrac"},Object(m.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"1.01em"}},Object(m.b)("span",{parentName:"span",style:{top:"-2.655em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen mtight"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mclose mtight"},")")))),Object(m.b)("span",{parentName:"span",style:{top:"-3.23em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),Object(m.b)("span",{parentName:"span",className:"frac-line",style:{borderBottomWidth:"0.04em"}})),Object(m.b)("span",{parentName:"span",style:{top:"-3.485em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"3em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen mtight"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose mtight"},")"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen mtight"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mrel mtight"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose mtight"},")"))))),Object(m.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.52em"}},Object(m.b)("span",{parentName:"span"}))))),Object(m.b)("span",{parentName:"span",className:"mclose nulldelimiter"})))))),"."),Object(m.b)("p",null,"The term ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(y | \\theta)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")")))))," is called the likelihood function, and is\ngiven directly by the problem definition as ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mi",{parentName:"mrow"},"N"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03bc"),Object(m.b)("mo",{parentName:"mrow",separator:"true"},","),Object(m.b)("mi",{parentName:"mrow"},"\u03c3"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(y | \\theta) = N(\\mu, \\sigma)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"="),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.10903em"}},"N"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"\u03bc"),Object(m.b)("span",{parentName:"span",className:"mpunct"},","),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"\u03c3"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),". The term ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(\\theta)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")")))))," is a prior distribution over the parameters,\nwhich we will define later. The final term involved ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(y)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mclose"},")")))))," is called the marginal likelihood. Formally, it can be defined as ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mo",{parentName:"msub"},"\u222b"),Object(m.b)("mi",{parentName:"msub"},"\u03b8")),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(m.b)("mi",{parentName:"mrow"},"d"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(y) = \\int_\\theta p(y | \\theta) p(\\theta) d\\theta")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"="),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1.1608200000000002em",verticalAlign:"-0.35582em"}}),Object(m.b)("span",{parentName:"span",className:"mop"},Object(m.b)("span",{parentName:"span",className:"mop op-symbol small-op",style:{marginRight:"0.19445em",position:"relative",top:"-0.0005599999999999772em"}},"\u222b"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.1302879999999999em"}},Object(m.b)("span",{parentName:"span",style:{top:"-2.34418em",marginLeft:"-0.19445em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight",style:{marginRight:"0.02778em"}},"\u03b8")))),Object(m.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.35582em"}},Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"d"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"))))),".\nFortunately, we will never need to compute this quantity."),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Remark: Computing the posterior distribution of the parameters will also be our goal in a real shape model fitting application.\nThe only difference is that the parameters ",Object(m.b)("span",{parentName:"em",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"\u03b8")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8")))))," are not mean and standard deviation, but the shape model parameters, and the data ",Object(m.b)("span",{parentName:"em",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"y")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"y")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.625em",verticalAlign:"-0.19444em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y")))))," are\nnot simulated numbers, but measurements of the target object, such as a set of landmark points, a surface or even an image.")),Object(m.b)("h3",{id:"metropolis-hastings-algorithm"},"Metropolis Hastings Algorithm"),Object(m.b)("p",null,"The way we approach such fitting problem in Scalismo is by using the\nMetropolis Hastings algorithm. The Metropolis-Hastings algorithm allows us to\ndraw samples from any distribution, given that the unnormalized distribution can be evaluated point-wise. This requirement is\neasy to fulfill for all shape modelling applications."),Object(m.b)("p",null,"For setting up the Metropolis-Hastings algorithm, we need two things:"),Object(m.b)("ol",null,Object(m.b)("li",{parentName:"ol"},"The (unnormalized) target distribution, from which we want to sample. In our case this is the posterior distribution ",Object(m.b)("span",{parentName:"li",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(\\theta \\mid y)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),". In Scalismo\nthe corresponding class is called the ",Object(m.b)("inlineCode",{parentName:"li"},"Distribution Evaluator"),"."),Object(m.b)("li",{parentName:"ol"},"A proposal distribution ",Object(m.b)("span",{parentName:"li",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"Q"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msup"},"\u03b8"),Object(m.b)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032")),Object(m.b)("mo",{parentName:"mrow"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"Q(\\theta' \\mid \\theta)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1.001892em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"Q"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.751892em"}},Object(m.b)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),", which generates for a given sample ",Object(m.b)("span",{parentName:"li",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"\u03b8")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8")))))," a new sample ",Object(m.b)("span",{parentName:"li",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msup"},"\u03b8"),Object(m.b)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta'")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.751892em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.751892em"}},Object(m.b)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))))))),".")),Object(m.b)("p",null,"The Metropolis Hastings algorithm introduces an ingenious scheme for accepting\nand rejecting the samples from this proposal distribution, based on their probability under the target density,\nsuch that the resulting sequence of samples is guaranteed to be distributed according to the\ntarget distribution.\nIn practice, the algorithm works as follows: It uses the proposal generator to perturb a given sample ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"\u03b8")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8")))))," to obtain a new sample ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msup"},"\u03b8"),Object(m.b)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta'")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.751892em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.751892em"}},Object(m.b)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},"\u2032"))))))))))))),".  Then it checks, using the evaluator, which of the two samples, ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"\u03b8")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8")))))," or ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("msup",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msup"},"\u03b8"),Object(m.b)("mo",{parentName:"msup",mathvariant:"normal",lspace:"0em",rspace:"0em"},"\u2032"))),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta'")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.751892em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.751892em"}},Object(m.b)("span",{parentName:"span",style:{top:"-3.063em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},"\u2032")))))))))))))," is more likely and\nuses this ratio as a basis for rejecting or accepting the new sample."),Object(m.b)("h3",{id:"implementation-in-scalismo"},"Implementation in Scalismo"),Object(m.b)("h5",{id:"preparation"},"Preparation"),Object(m.b)("p",null,"As in the previous tutorials, we start by importing some commonly used objects and initializing the system."),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"}," import scalismo.sampling.algorithms.MetropolisHastings\n import scalismo.sampling.evaluators.ProductEvaluator\n import scalismo.sampling.loggers.AcceptRejectLogger\n import scalismo.sampling.proposals.MixtureProposal\n import scalismo.sampling.{DistributionEvaluator, ProposalGenerator, TransitionProbability}\n\n scalismo.initialize()\n implicit val rng = scalismo.utils.Random(42)\n")),Object(m.b)("p",null,"To test our method, we generate data from a normal distribution ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"N"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mo",{parentName:"mrow"},"\u2212"),Object(m.b)("mn",{parentName:"mrow"},"5"),Object(m.b)("mo",{parentName:"mrow",separator:"true"},","),Object(m.b)("mn",{parentName:"mrow"},"17"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"N(-5, 17)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.10903em"}},"N"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2212"),Object(m.b)("span",{parentName:"span",className:"mord"},"5"),Object(m.b)("span",{parentName:"span",className:"mpunct"},","),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mord"},"1"),Object(m.b)("span",{parentName:"span",className:"mord"},"7"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),"."),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"  val mu = -5\n  val sigma = 17\n\n  val trueDistribution = breeze.stats.distributions.Gaussian(mu, sigma)\n  val data = for (_ <- 0 until 100) yield {\n    trueDistribution.draw()\n  }\n")),Object(m.b)("p",null,"Before we discuss the two main components, the ",Object(m.b)("em",{parentName:"p"},"Evaluator")," and ",Object(m.b)("em",{parentName:"p"},"Proposal generator")," in detail, we first define a class for representing\nthe parameters ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03bc"),Object(m.b)("mo",{parentName:"mrow",separator:"true"},","),Object(m.b)("mi",{parentName:"mrow"},"\u03c3"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta = (\\mu, \\sigma)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"="),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"\u03bc"),Object(m.b)("span",{parentName:"span",className:"mpunct"},","),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"\u03c3"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),":"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"case class Parameters(mu : Double, sigma: Double)\n")),Object(m.b)("p",null,"We introduce a further class to represent a sample from the chain. A sample is\nsimply a set of parameters together with a tag, which helps us to keep track later\non, which proposal generator generated the sample:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"case class Sample(parameters : Parameters, generatedBy : String)\n")),Object(m.b)("h4",{id:"evaluators-modelling-the-target-density"},"Evaluators: Modelling the target density"),Object(m.b)("p",null,"In Scalismo, the target density is represented by classes, which we will refer to\nas ",Object(m.b)("em",{parentName:"p"},"Evaluators"),". Any Evaluator is a subclass of the class ",Object(m.b)("inlineCode",{parentName:"p"},"DistributionEvalutor"),",\ndefined as follows:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"trait DistributionEvaluator[A] {\n  /** log probability/density of sample */\n  def logValue(sample: A): Double\n}\n")),Object(m.b)("p",null,"We see that the only thing we need to define is the log probability of a sample."),Object(m.b)("p",null,"In our case, we will define separate evaluators for the prior distribution ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(\\theta)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")")))))," and\nthe likelihood ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(y | \\theta)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),".\nThe evaluator for the likelihood is simple: Assuming a normal model, we define\nthe normal distribution with the given parameters ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"\u03b8")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"\\theta")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"0.69444em",verticalAlign:"0em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"))))),", and use this model\nto evaluate the likelihood of the individual observations.\nWe assume that the observations are i.i.d. and hence the joint probability\nfactorises as\n",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msub"},"y"),Object(m.b)("mn",{parentName:"msub"},"1")),Object(m.b)("mo",{parentName:"mrow",separator:"true"},","),Object(m.b)("mo",{parentName:"mrow"},"\u2026"),Object(m.b)("mo",{parentName:"mrow",separator:"true"},","),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msub"},"y"),Object(m.b)("mi",{parentName:"msub"},"n")),Object(m.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("msubsup",{parentName:"mrow"},Object(m.b)("mo",{parentName:"msubsup"},"\u220f"),Object(m.b)("mrow",{parentName:"msubsup"},Object(m.b)("mi",{parentName:"mrow"},"i"),Object(m.b)("mo",{parentName:"mrow"},"="),Object(m.b)("mn",{parentName:"mrow"},"1")),Object(m.b)("mi",{parentName:"msubsup"},"n")),Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("msub",{parentName:"mrow"},Object(m.b)("mi",{parentName:"msub"},"y"),Object(m.b)("mi",{parentName:"msub"},"i")),Object(m.b)("mi",{parentName:"mrow",mathvariant:"normal"},"\u2223"),Object(m.b)("mi",{parentName:"mrow"},"\u03b8"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(y |\\theta) = p(y_1, \\ldots, y_n |\\theta) = \\prod_{i=1}^n p(y_i |\\theta)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"="),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.30110799999999993em"}},Object(m.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.03588em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},"1")))),Object(m.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",{parentName:"span",className:"mpunct"},","),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"minner"},"\u2026"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mpunct"},","),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mord"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.151392em"}},Object(m.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.03588em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"n")))),Object(m.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}}),Object(m.b)("span",{parentName:"span",className:"mrel"},"="),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.2777777777777778em"}})),Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1.104002em",verticalAlign:"-0.29971000000000003em"}}),Object(m.b)("span",{parentName:"span",className:"mop"},Object(m.b)("span",{parentName:"span",className:"mop op-symbol small-op",style:{position:"relative",top:"-0.0000050000000000050004em"}},"\u220f"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.804292em"}},Object(m.b)("span",{parentName:"span",style:{top:"-2.40029em",marginLeft:"0em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mtight"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"i"),Object(m.b)("span",{parentName:"span",className:"mrel mtight"},"="),Object(m.b)("span",{parentName:"span",className:"mord mtight"},"1")))),Object(m.b)("span",{parentName:"span",style:{top:"-3.2029em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"n")))),Object(m.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.29971000000000003em"}},Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",{parentName:"span",className:"mspace",style:{marginRight:"0.16666666666666666em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"msupsub"},Object(m.b)("span",{parentName:"span",className:"vlist-t vlist-t2"},Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.31166399999999994em"}},Object(m.b)("span",{parentName:"span",style:{top:"-2.5500000000000003em",marginLeft:"-0.03588em",marginRight:"0.05em"}},Object(m.b)("span",{parentName:"span",className:"pstrut",style:{height:"2.7em"}}),Object(m.b)("span",{parentName:"span",className:"sizing reset-size6 size3 mtight"},Object(m.b)("span",{parentName:"span",className:"mord mathdefault mtight"},"i")))),Object(m.b)("span",{parentName:"span",className:"vlist-s"},"\u200b")),Object(m.b)("span",{parentName:"span",className:"vlist-r"},Object(m.b)("span",{parentName:"span",className:"vlist",style:{height:"0.15em"}},Object(m.b)("span",{parentName:"span"})))))),Object(m.b)("span",{parentName:"span",className:"mord"},"\u2223"),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.02778em"}},"\u03b8"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),".\nThis leads to the following implementation of the liklihood function:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"  case class LikelihoodEvaluator(data : Seq[Double]) extends DistributionEvaluator[Sample] {\n\n    override def logValue(theta: Sample): Double = {\n      val likelihood = breeze.stats.distributions.Gaussian(\n        theta.parameters.mu, theta.parameters.sigma\n      )\n      val likelihoods = for (x <- data) yield {\n        likelihood.logPdf(x)\n      }\n      likelihoods.sum\n    }\n  }\n")),Object(m.b)("p",null,"Notice that we work in Scalismo with log probabilities, and hence the product in above formula\nbecomes a sum."),Object(m.b)("p",null,"As a prior, we also use for both parameters a univariate normal distribution."),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"object PriorEvaluator extends DistributionEvaluator[Sample] {\n\n    val priorDistMu = breeze.stats.distributions.Gaussian(0, 20)\n    val priorDistSigma = breeze.stats.distributions.Gaussian(0, 100)\n\n    override def logValue(theta: Sample): Double = {\n      priorDistMu.logPdf(theta.parameters.mu)\n      + priorDistSigma.logPdf(theta.parameters.sigma)\n    }\n  }\n")),Object(m.b)("p",null,"The target density (i.e. the posterior distribution) can be computed by\ntaking the product of the prior and the likelihood."),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"val posteriorEvaluator = ProductEvaluator(PriorEvaluator, LikelihoodEvaluator(data))\n")),Object(m.b)("p",null,"Note that the posteriorEvaluator represents the unnormalized posterior, as we did\nnot normalize by the probability of the data ",Object(m.b)("span",{parentName:"p",className:"math math-inline"},Object(m.b)("span",{parentName:"span",className:"katex"},Object(m.b)("span",{parentName:"span",className:"katex-mathml"},Object(m.b)("math",{parentName:"span",xmlns:"http://www.w3.org/1998/Math/MathML"},Object(m.b)("semantics",{parentName:"math"},Object(m.b)("mrow",{parentName:"semantics"},Object(m.b)("mi",{parentName:"mrow"},"p"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},"("),Object(m.b)("mi",{parentName:"mrow"},"y"),Object(m.b)("mo",{parentName:"mrow",stretchy:"false"},")")),Object(m.b)("annotation",{parentName:"semantics",encoding:"application/x-tex"},"p(y)")))),Object(m.b)("span",{parentName:"span",className:"katex-html","aria-hidden":"true"},Object(m.b)("span",{parentName:"span",className:"base"},Object(m.b)("span",{parentName:"span",className:"strut",style:{height:"1em",verticalAlign:"-0.25em"}}),Object(m.b)("span",{parentName:"span",className:"mord mathdefault"},"p"),Object(m.b)("span",{parentName:"span",className:"mopen"},"("),Object(m.b)("span",{parentName:"span",className:"mord mathdefault",style:{marginRight:"0.03588em"}},"y"),Object(m.b)("span",{parentName:"span",className:"mclose"},")"))))),"."),Object(m.b)("h4",{id:"the-proposal-generator"},"The proposal generator"),Object(m.b)("p",null,"In Scalismo, a proposal generator is defined by extending the trait\n",Object(m.b)("em",{parentName:"p"},"ProposalGenerator"),", which is defined as follows"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"trait ProposalGenerator[A] {\n  /** draw a sample from this proposal distribution, may depend on current state */\n  def propose(current: A): A\n}\n")),Object(m.b)("p",null,"In order to be able to use a proposal generator in the Metropolis-Hastings algorithm,\nwe also need to implement the trait ",Object(m.b)("inlineCode",{parentName:"p"},"TransitionProbability"),":"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"trait TransitionProbability[A] extends TransitionRatio[A] {\n  /** rate of transition from to (log value) */\n  def logTransitionProbability(from: A, to: A): Double\n}\n")),Object(m.b)("p",null,"To keep things simple, we use here a ",Object(m.b)("em",{parentName:"p"},"random walk proposal"),". This is a proposal\nwhich updates the current state by taking a step of random length in a random direction.\nIt is defined as follows:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},'case class RandomWalkProposal(stddevMu: Double, stddevSigma : Double)(implicit rng : scalismo.utils.Random)\n    extends ProposalGenerator[Sample] with TransitionProbability[Sample] {\n\n    override def propose(sample: Sample): Sample = {\n      val newParameters = Parameters(\n        mu = sample.parameters.mu + rng.breezeRandBasis.gaussian(0, stddevMu).draw(),\n        sigma = sample.parameters.sigma + rng.breezeRandBasis.gaussian(0, stddevSigma).draw()\n      )\n\n      Sample(newParameters, s"randomWalkProposal ($stddevMu, $stddevSigma)")\n    }\n\n    override def logTransitionProbability(from: Sample, to: Sample) : Double = {\n\n      val stepDistMu = breeze.stats.distributions.Gaussian(0, stddevMu)\n      val stepDistSigma = breeze.stats.distributions.Gaussian(0, stddevSigma)\n\n      val residualMu = to.parameters.mu - from.parameters.mu\n      val residualSigma = to.parameters.sigma - from.parameters.sigma\n      stepDistMu.logPdf(residualMu)  + stepDistMu.logPdf(residualSigma)\n    }\n  }\n')),Object(m.b)("p",null,Object(m.b)("em",{parentName:"p"},"Remark: the second constructor argument ",Object(m.b)("inlineCode",{parentName:"em"},"implicit rng : scalismo.utils.Random"),"\nis used to automatically pass the globally defined random generator object to the\nclass. If we always use this random generator to generate our random numbers, we can obtain reproducible runs,\nby seeding this random generator at the beginning of our program.")),Object(m.b)("p",null,"Let's define two random walk proposals with different step length:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"val smallStepProposal = RandomWalkProposal(3.0, 1.0)\nval largeStepProposal = RandomWalkProposal(9.0, 3.0)\n")),Object(m.b)("p",null,"Varying the step length allow us to sometimes take large step, in order to explore the global\nlandscape, and sometimes smaller steps, to explore a local environment. We can combine these proposal into a\n",Object(m.b)("inlineCode",{parentName:"p"},"MixtureProposal"),", which chooses the individual proposals with a given\nprobability. Here We choose to take the large step 20% of the time, and the smaller\nsteps 80% of the time:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"val generator = MixtureProposal.fromProposalsWithTransition[Sample](\n    (0.8, smallStepProposal),\n    (0.2, largeStepProposal)\n    )\n")),Object(m.b)("h4",{id:"building-the-markov-chain"},"Building the Markov Chain"),Object(m.b)("p",null,"Now that we have all the components set up, we can assemble the Markov Chain."),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"val chain = MetropolisHastings(generator, posteriorEvaluator)\n")),Object(m.b)("p",null,"To run the chain, we obtain an iterator,\nwhich we then consume to drive the sampling generation. To obtain the iterator, we need to specify the initial\nsample:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},'val initialSample = Sample(Parameters(0.0, 10.0), generatedBy="initial")\nval mhIterator = chain.iterator(initialSample)\n')),Object(m.b)("p",null,"Our initial parameters might be far away from a high-probability area of our target\ndensity. Therefore it might take a few hundred or even a few thousand iterations before the produced samples\nstart to follow the required distribution. We therefore have to drop the\nsamples in this burn-in phase, before we use the samples:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"val samples = mhIterator.drop(1000).take(5000).toIndexedSeq\n")),Object(m.b)("p",null,"As we have generated synthetic data, we can check if the expected value, computed\nfrom this samples, really corresponds to the parameters from which we sampled\nour data:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},'val estimatedMean = samples.map(sample => sample.parameters.mu).sum  / samples.size\n// estimatedMean: Double = -4.412402232734195\n  println("estimated mean is " + estimatedMean)\n// estimated mean is -4.412402232734195\n  val estimatedSigma = samples.map(sample => sample.parameters.sigma).sum / samples.size\n// estimatedSigma: Double = 16.457812850498648\n  println("estimated sigma is " + estimatedSigma)\n// estimated sigma is 16.457812850498648\n')),Object(m.b)("p",null,"In the next tutorial, we see an example of how the exact same  mechanism can be used for\nfitting shape models. Before we discuss this, we should, however, spend some time\nto discuss how the chain can be debugged in case something goes wrong.\nYou can safely skip this section and come back to it later if you first want to\nsee a practical example."),Object(m.b)("h4",{id:"debugging-the-markov-chain"},"Debugging the markov Chain"),Object(m.b)("p",null,"Sometimes a chain does not work as expected. The reason is usually that our proposals\nare not suitable for the target distribution. To diagnose the\nbehaviour of the chain we can introduce a logger. To write a logger, we need to extend\nthe trait ",Object(m.b)("inlineCode",{parentName:"p"},"AcceptRejectLogger"),", which is defined as follows:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"trait AcceptRejectLogger[A] {\n  def accept(current: A, sample: A, generator: ProposalGenerator[A], evaluator: DistributionEvaluator[A]): Unit\n\n  def reject(current: A, sample: A, generator: ProposalGenerator[A], evaluator: DistributionEvaluator[A]): Unit\n}\n")),Object(m.b)("p",null,"The two methods, ",Object(m.b)("inlineCode",{parentName:"p"},"accept")," and ",Object(m.b)("inlineCode",{parentName:"p"},"reject")," are called whenever a sample is\naccepted or rejected. We can overwrite these methods to implement our debugging code."),Object(m.b)("p",null,"The following, very simple logger counts all the accepted and rejected samples and\ncomputes the acceptance ratio. This acceptance ratio is a simple, but already useful\nindicator to diagnose if all proposal generators function as expected."),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"  class Logger extends AcceptRejectLogger[Sample] {\n    private val numAccepted = collection.mutable.Map[String, Int]()\n    private val numRejected = collection.mutable.Map[String, Int]()\n\n    override def accept(current: Sample,\n                        sample: Sample,\n                        generator: ProposalGenerator[Sample],\n                        evaluator: DistributionEvaluator[Sample]\n                       ): Unit = {\n      val numAcceptedSoFar = numAccepted.getOrElseUpdate(sample.generatedBy, 0)\n      numAccepted.update(sample.generatedBy, numAcceptedSoFar + 1)\n    }\n\n    override def reject(current: Sample,\n                          sample: Sample,\n                          generator: ProposalGenerator[Sample],\n                          evaluator: DistributionEvaluator[Sample]\n                         ): Unit = {\n      val numRejectedSoFar = numRejected.getOrElseUpdate(sample.generatedBy, 0)\n      numRejected.update(sample.generatedBy, numRejectedSoFar + 1)\n    }\n\n\n    def acceptanceRatios() : Map[String, Double] = {\n      val generatorNames = numRejected.keys.toSet.union(numAccepted.keys.toSet)\n      val acceptanceRatios = for (generatorName <- generatorNames ) yield {\n        val total = (numAccepted.getOrElse(generatorName, 0)\n                     + numRejected.getOrElse(generatorName, 0)).toDouble\n        (generatorName, numAccepted.getOrElse(generatorName, 0) / total)\n      }\n      acceptanceRatios.toMap\n    }\n  }\n\n")),Object(m.b)("p",null,"To use the logger, we simply rerun the chain, but pass the logger now as\na second argument to the ",Object(m.b)("inlineCode",{parentName:"p"},"iterator")," method:"),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},"  val logger = new Logger()\n  val mhIteratorWithLogging = chain.iterator(initialSample, logger)\n\n  val samples2 = mhIteratorWithLogging.drop(1000).take(3000).toIndexedSeq\n")),Object(m.b)("p",null,"We can now check how often the individual samples got accepted."),Object(m.b)("pre",null,Object(m.b)("code",{parentName:"pre",className:"language-scala"},'println("acceptance ratio is " +logger.acceptanceRatios())\n// acceptance ratio is Map(randomWalkProposal (3.0, 1.0) -> 0.4495383635784782, randomWalkProposal (9.0, 3.0) -> 0.11888111888111888)\n')),Object(m.b)("p",null,"We see that the acceptance ratio of the random walk proposal, which takes the\nsmaller step is quite high, but that the larger step is often rejected. We might\ntherefore want to reduce this step size slightly, as a proposal that is so often\nrejected is not very efficient."),Object(m.b)("p",null,"In more complicated applications, this type of debugging is crucial for obtaining\nefficient fitting algorithms."))}i.isMDXComponent=!0},160:function(a,e,t){"use strict";t.d(e,"a",(function(){return i})),t.d(e,"b",(function(){return h}));var s=t(0),n=t.n(s);function m(a,e,t){return e in a?Object.defineProperty(a,e,{value:t,enumerable:!0,configurable:!0,writable:!0}):a[e]=t,a}function p(a,e){var t=Object.keys(a);if(Object.getOwnPropertySymbols){var s=Object.getOwnPropertySymbols(a);e&&(s=s.filter((function(e){return Object.getOwnPropertyDescriptor(a,e).enumerable}))),t.push.apply(t,s)}return t}function r(a){for(var e=1;e<arguments.length;e++){var t=null!=arguments[e]?arguments[e]:{};e%2?p(Object(t),!0).forEach((function(e){m(a,e,t[e])})):Object.getOwnPropertyDescriptors?Object.defineProperties(a,Object.getOwnPropertyDescriptors(t)):p(Object(t)).forEach((function(e){Object.defineProperty(a,e,Object.getOwnPropertyDescriptor(t,e))}))}return a}function c(a,e){if(null==a)return{};var t,s,n=function(a,e){if(null==a)return{};var t,s,n={},m=Object.keys(a);for(s=0;s<m.length;s++)t=m[s],e.indexOf(t)>=0||(n[t]=a[t]);return n}(a,e);if(Object.getOwnPropertySymbols){var m=Object.getOwnPropertySymbols(a);for(s=0;s<m.length;s++)t=m[s],e.indexOf(t)>=0||Object.prototype.propertyIsEnumerable.call(a,t)&&(n[t]=a[t])}return n}var b=n.a.createContext({}),l=function(a){var e=n.a.useContext(b),t=e;return a&&(t="function"==typeof a?a(e):r(r({},e),a)),t},i=function(a){var e=l(a.components);return n.a.createElement(b.Provider,{value:e},a.children)},o={inlineCode:"code",wrapper:function(a){var e=a.children;return n.a.createElement(n.a.Fragment,{},e)}},N=n.a.forwardRef((function(a,e){var t=a.components,s=a.mdxType,m=a.originalType,p=a.parentName,b=c(a,["components","mdxType","originalType","parentName"]),i=l(t),N=s,h=i["".concat(p,".").concat(N)]||i[N]||o[N]||m;return t?n.a.createElement(h,r(r({ref:e},b),{},{components:t})):n.a.createElement(h,r({ref:e},b))}));function h(a,e){var t=arguments,s=e&&e.mdxType;if("string"==typeof a||s){var m=t.length,p=new Array(m);p[0]=N;var r={};for(var c in e)hasOwnProperty.call(e,c)&&(r[c]=e[c]);r.originalType=a,r.mdxType="string"==typeof a?a:s,p[1]=r;for(var b=2;b<m;b++)p[b]=t[b];return n.a.createElement.apply(null,p)}return n.a.createElement.apply(null,t)}N.displayName="MDXCreateElement"}}]);